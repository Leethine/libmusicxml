/*
  MusicXML Library
  Copyright (C) Grame 2006-2013

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.

  Grame Research Laboratory, 11, cours de Verdun Gensoul 69002 Lyon - France
  research@grame.fr
*/

#include "lpsrScores.h"

#include "version.h"

#include "generalOah.h"

#include "setTraceOahIfDesired.h"
#ifdef TRACE_OAH
  #include "traceOah.h"
#endif

#include "lpsr2LilypondOah.h"


using namespace std;

namespace MusicXML2
{

/*
cautionPath =
#'(
  (moveto 0.25 0)
  (rlineto 0.75 0)
  (rlineto -1.0 -1.5)
  (rlineto 1.25 0)

  (moveto 0.75 1.5)
  (rlineto 1.75 -3.5)
  (rlineto -4.0 0)

  (closepath))
caution =
\markup {
  \path #0.2 #cautionPath
}

goAheadRightArrowPath =
#'(
 ;; (moveto 0.25 0)
  (lineto 5.0 0)

  (moveto 5.0 0.0)
  (lineto 4.0 1.125)

  (moveto 5.0 0.0)
  (lineto 4.0 -1.125)

  (closepath))
goAheadRightArrow =
\markup {
  \path #0.2 #goAheadRightArrowPath
}

customBreathe = {
  \once\override BreathingSign.outside-staff-priority = 1
  \once\override BreathingSign.stencil = #ly:text-interface::print
  \once\override BreathingSign.text = ","
  \once\override BreathingSign.font-size = 7
  \once\override BreathingSign.font-series= #'bold
  \breathe
}

*/

//______________________________________________________________________________
S_lpsrScore lpsrScore::create (
  int        inputLineNumber,
  S_msrScore mScore)
{
  lpsrScore* o = new lpsrScore (
    inputLineNumber, mScore);
  assert(o!=0);
  return o;
}

lpsrScore::lpsrScore (
  int        inputLineNumber,
  S_msrScore mScore)
    : lpsrElement (inputLineNumber)
{
  fMsrScore = mScore;

  // create the LilyPond version assoc
  fLilypondVersion =
    lpsrVarValAssoc::create (
      inputLineNumber,
      lpsrVarValAssoc::kCommentedNo,
      lpsrVarValAssoc::kWithBackSlashYes,
      lpsrVarValAssoc::kLibraryVersion,
      lpsrVarValAssoc::kVarValSeparatorSpace,
      lpsrVarValAssoc::kQuotesAroundValueYes,
      gGlobalLpsrOah->fLilyPondVersion,
      lpsrVarValAssoc::g_LilyPondVarValAssocNoUnit,
      kFontStyleNone,
      kFontWeightNone,
      lpsrVarValAssoc::g_LilyPondVarValAssocNoComment,
      lpsrVarValAssoc::kEndlOnce);

  // should the initial comments about the executable and the options used
  // be generated?
  if (gGlobalLpsr2LilypondOah->fXml2lyInfos) {
    // create the 'input source name and translation date' comment
    {
      stringstream s;

      s <<
        "Generated by " <<
        gGlobalOahOahGroup->fHandlerExecutableName <<
        " " <<
        currentVersionNumber () <<
        " from ";

      if (gGlobalOahOahGroup->fInputSourceName == "-") {
        s << "standard input";
      }
      else {
        s << "\"" << gGlobalOahOahGroup->fInputSourceName << "\"";
      }

      s <<
        endl <<
        "% on " << gGlobalGeneralOahGroup->fTranslationDateFull <<
        endl;

      fInputSourceNameComment =
        lpsrComment::create (
          inputLineNumber,
          s.str (),
          lpsrComment::kNoGapAfterwards);
    }

    // create the 'translation command line' comment
    {
      stringstream s;

      s <<
        "The translation command line was:";

      fTranslationDateComment =
        lpsrComment::create (
          inputLineNumber,
          s.str (),
          lpsrComment::kNoGapAfterwards);
    }

    // create the 'command line as supplied' comment
    {
      stringstream s;

      s <<
        gTab <<
        gGlobalOahOahGroup->fCommandLineAsSupplied;

      fCommandLineAsSuppliedComment =
        lpsrComment::create (
          inputLineNumber,
          s.str (),
          lpsrComment::kNoGapAfterwards);
    }

    // do the command line long and short options differ?
    bool
      longAndShortOptionsDiffer =
        gGlobalOahOahGroup->fCommandLineWithShortOptionsNames
          !=
        gGlobalOahOahGroup->fCommandLineWithLongOptionsNames;

    // create the 'command line long options' comment
    {
      stringstream s;

      s <<
        "or, with long option names:" <<
        endl <<
        "%" <<
        gTab <<
        gGlobalOahOahGroup->fCommandLineWithLongOptionsNames;

      if (longAndShortOptionsDiffer) {
        s <<
          endl <<
          "% or, with short option names:";
      }

      fCommandLineLongOptionsComment =
        lpsrComment::create (
          inputLineNumber,
          s.str (),
          longAndShortOptionsDiffer
            ? lpsrComment::kNoGapAfterwards
            : lpsrComment::kGapAfterwards);
    }

    if (longAndShortOptionsDiffer) {
      // create the 'command line short options' comment
      stringstream s;

      s <<
        gTab <<
        gGlobalOahOahGroup->fCommandLineWithShortOptionsNames;

      fCommandLineShortOptionsComment =
        lpsrComment::create (
          inputLineNumber,
          s.str (),
          lpsrComment::kGapAfterwards);
    }
  }

  // create the global staff size variable
  // too early to benefit from gGlobalLpsrOah->fGlobalStaffSize... JMI
  // needs to be updated later in msrScaling::globalStaffSize()
  fScoreGlobalStaffSizeSchemeVariable =
    lpsrSchemeVariable::create (
      inputLineNumber,
      lpsrSchemeVariable::kCommentedNo,
      "set-global-staff-size",
      to_string (gGlobalLpsrOah->fGlobalStaffSize),
      "Comment or adapt next line as needed (default is 20)",
      lpsrSchemeVariable::kEndlTwice);

  // initialize Scheme functions informations
  // ----------------------------------------

  // files includes
  fJianpuFileIncludeIsNeeded = false;

  // Scheme modules
  fScmAndAccregSchemeModulesAreNeeded = false;

  // Scheme functions
  fTongueSchemeFunctionIsNeeded = false;
  fCustomShortBarlineSchemeFunctionIsNeeded = false;
  fEditorialAccidentalSchemeFunctionIsNeeded = false;
  fDynamicsSchemeFunctionIsNeeded = false;
  fTupletsCurvedBracketsSchemeFunctionIsNeeded = false;
  fAfterSchemeFunctionIsNeeded = false;
  fTempoRelationshipSchemeFunctionIsNeeded = false;
  fGlissandoWithTextSchemeFunctionsIsNeeded = false;
  fOtherDynamicSchemeFunctionIsNeeded = false;

  // markups
  fDampMarkupIsNeeded = false;
  fDampAllMarkupIsNeeded = false;

  // white note heads
  fWhiteNoteHeadsIsNeeded = false;

    // bar numbers
  fBoxAroundNextBarNumberIsNeeded = false;

  // jazz chords display
  fJazzChordsDisplayIsNeeded = false;

  // colored ledger lines
  fColoredLedgerLinesIsNeeded = false;

  // hidden measure and barline
  fHiddenMeasureAndBarlineIsNeeded = false;

  // merge rests
  fMergeRestsIsNeeded = false;

  if (gGlobalLpsr2LilypondOah->fLilypondCompileDate) {
    // create the date and time functions
    addDateAndTimeSchemeFunctionsToScore ();
  }

  if (gGlobalLpsr2LilypondOah->fPointAndClickOff) {
    // create the pointAndClickOff scheme function
    addPointAndClickOffSchemeFunctionsToScore ();
  }

  if (gGlobalLpsr2LilypondOah->fPointAndClickOff) {
    // create the glissandoWithText scheme functions
    addGlissandoWithTextSchemeFunctionsToScore ();
  }

  if (gGlobalLpsr2LilypondOah->fJianpu) {
    // create the Jianpu include command JMI
  }

  // create the header
  fScoreHeader =
    lpsrHeader::create (
      inputLineNumber);

  // create the paper
  fScorePaper =
    lpsrPaper::create (
      inputLineNumber,
      fMsrScore->getScaling (),
      fMsrScore->getPageLayout ());

/* JMI
  // populate the paper
  msrLength paperWidth =
    elt->getPaperWidth ();
//  if (gGlobalLpsrOah->fPaperWidth.getLengthValue () > 0.0) {
  if (gGlobalLpsrOah->fPaperWidthAtom->getVariableHasBeenSet ()) {
    paperWidth = gGlobalLpsrOah->fPaperWidth;
  }
  paper ->
    setPaperWidth (paperWidth);

  msrLength paperHeight =
    elt->getPaperHeight ();
//  if (gGlobalLpsrOah->fPaperHeight.getLengthValue () > 0.0) {
  if (gGlobalLpsrOah->fPaperHeightAtom->getVariableHasBeenSet ()) {
    paperWidth = gGlobalLpsrOah->fPaperHeight;
  }
  paper->
    setPaperHeight (paperHeight);

  msrLength topMargin =
    elt->getTopMargin ();
  if (gGlobalLpsrOah->fTopMargin > 0.0) {
    topMargin = gGlobalLpsrOah->fTopMargin;
  }
  paper->
    setTopMargin (topMargin);

  msrLength bottomMargin =
    elt->getBottomMargin ();
  if (gGlobalLpsrOah->fBottomMargin > 0.0) {
    bottomMargin = gGlobalLpsrOah->fBottomMargin;
  }
  paper->
    setBottomMargin (bottomMargin);

  msrLength leftMargin =
    elt->getLeftMargin ();
  if (gGlobalLpsrOah->fLeftMargin > 0.0) {
    leftMargin = gGlobalLpsrOah->fLeftMargin;
  }
  paper->
    setLeftMargin (leftMargin);

  msrLength rightMargin =
    elt->getRightMargin ();
  if (gGlobalLpsrOah->fRightMargin > 0.0) {
    rightMargin = gGlobalLpsrOah->fRightMargin;
  }
  paper->
    setRightMargin (rightMargin);
*/

  // indents
  if (gGlobalLpsrOah->fPaperHorizontalShift.getLengthValue () > 0.0) {
    fScorePaper->
      setHorizontalShift (
        msrLength::create (
          gGlobalLpsrOah->fPaperHorizontalShift.getLengthUnitKind (),
          gGlobalLpsrOah->fPaperHorizontalShift.getLengthValue ()));
  }

  if (gGlobalLpsrOah->fPaperIndent.getLengthValue () > 0.0) {
    fScorePaper->
      setIndent (
        msrLength::create (
          gGlobalLpsrOah->fPaperIndent.getLengthUnitKind (),
          gGlobalLpsrOah->fPaperIndent.getLengthValue ()));
  }

  if (gGlobalLpsrOah->fPaperShortIndent.getLengthValue () > 0.0) {
    fScorePaper->
      setShortIndent (
        msrLength::create (
          gGlobalLpsrOah->fPaperShortIndent.getLengthUnitKind (),
          gGlobalLpsrOah->fPaperShortIndent.getLengthValue ()));
  }

  // spaces
  if (gGlobalLpsrOah->fMarkupSystemSpacingPadding.getLengthValue () > 0.0) {
    fScorePaper->
      setMarkupSystemSpacingPadding (
        msrLength::create (
          gGlobalLpsrOah->fMarkupSystemSpacingPadding.getLengthUnitKind (),
          gGlobalLpsrOah->fMarkupSystemSpacingPadding.getLengthValue ()));
  }

  if (gGlobalLpsrOah->fBetweenSystemSpace.getLengthValue () > 0.0) {
    fScorePaper->
      setBetweenSystemSpace (
        msrLength::create (
          gGlobalLpsrOah->fBetweenSystemSpace.getLengthUnitKind (),
          gGlobalLpsrOah->fBetweenSystemSpace.getLengthValue ()));
  }

  if (gGlobalLpsrOah->fPageTopSpace.getLengthValue () > 0.0) {
    fScorePaper->
      setPageTopSpace (
        msrLength::create (
          gGlobalLpsrOah->fPageTopSpace.getLengthUnitKind (),
          gGlobalLpsrOah->fPageTopSpace.getLengthValue ()));
  }

  // counts
  if (gGlobalLpsrOah->fPageCount > 0) {
    fScorePaper->
      setPageCount (gGlobalLpsrOah->fPageCount);
  }

  if (gGlobalLpsrOah->fSystemCount > 0) {
    fScorePaper->
      setSystemCount (gGlobalLpsrOah->fSystemCount);
  }

  // compile date

  if (gGlobalLpsr2LilypondOah->fLilypondCompileDate) {
    // define headers and footers

    fScorePaper->
      setOddHeaderMarkup (
R"(\markup {
    \fill-line {
      \on-the-fly \not-first-page {
        \fromproperty #'page:page-number-string
        " "
        \fromproperty #'header:title
        " "
        \fromproperty #'header:subtitle
      }
    }
  }
)"
      );

    fScorePaper->
      setEvenHeaderMarkup (
R"(\markup {
    \fill-line {
      \on-the-fly \not-first-page {
        \fromproperty #'page:page-number-string
        " "
        \fromproperty #'header:title
        " "
        \fromproperty #'header:subtitle
      }
    }
  }
)"
      );

    stringstream s;

/* JMI YES???
      \fill-line {
        "https://github.com/grame-cncm/libmusicxml/tree/lilypond - http://www.lilypond.org"
      }
*/
    s <<
R"(\markup {
    \tiny
    \column {
      \fill-line {
        #(string-append
)"
      <<
      "\"Music generated from MusicXML by " <<
      gGlobalOahOahGroup->fHandlerExecutableName <<
      " " <<
      currentVersionNumber () <<
      " and engraved by LilyPond \" (lilypond-version))" <<
R"(
      }
      \fill-line { \italic { \modTimeAsString }}
    }
  }
)";

    fScorePaper->
      setOddFooterMarkup (
        s.str ());
  }

  // create the score layout // JMI ???
  fScoreLayout =
    lpsrLayout::create (
      inputLineNumber);

  // create the 'myBreakIsBreak' assoc
  {
    lpsrVarValAssoc::lpsrCommentedKind
      commentedKind =
        gGlobalLpsr2LilypondOah->fIgnoreMusicXMLLineBreaks
          ? lpsrVarValAssoc::kCommentedYes
          : lpsrVarValAssoc::kCommentedNo;

    fMyBreakIsBreakAssoc =
      lpsrVarValAssoc::create (
        inputLineNumber,
        commentedKind,
        lpsrVarValAssoc::kWithBackSlashNo,
        lpsrVarValAssoc::kLilypondMyBreak,
        lpsrVarValAssoc::kVarValSeparatorEqualSign,
        lpsrVarValAssoc::kQuotesAroundValueNo,
        "{ \\break }",
        lpsrVarValAssoc::g_LilyPondVarValAssocNoUnit,
        kFontStyleNone,
        kFontWeightNone,
        "Pick your choice from the next two lines as needed",
        lpsrVarValAssoc::kEndlNone);
  }

  // create the 'myBreakIsEmpty' assoc
  {
    lpsrVarValAssoc::lpsrCommentedKind
      commentedKind =
        gGlobalLpsr2LilypondOah->fIgnoreMusicXMLLineBreaks
          ? lpsrVarValAssoc::kCommentedNo
          : lpsrVarValAssoc::kCommentedYes;

    fMyBreakIsEmptyAssoc =
      lpsrVarValAssoc::create (
        inputLineNumber,
        commentedKind,
        lpsrVarValAssoc::kWithBackSlashNo,
        lpsrVarValAssoc::kLilypondMyBreak,
        lpsrVarValAssoc::kVarValSeparatorEqualSign,
        lpsrVarValAssoc::kQuotesAroundValueNo,
        "{ }",
        lpsrVarValAssoc::g_LilyPondVarValAssocNoUnit,
        kFontStyleNone,
        kFontWeightNone,
        lpsrVarValAssoc::g_LilyPondVarValAssocNoComment,
        lpsrVarValAssoc::kEndlOnce);
  }

  // create the 'myPageBreakIsPageBreak' assoc
  {
    lpsrVarValAssoc::lpsrCommentedKind
      commentedKind =
        gGlobalLpsr2LilypondOah->fIgnoreMusicXMLLineBreaks
          ? lpsrVarValAssoc::kCommentedYes
          : lpsrVarValAssoc::kCommentedNo;

    fMyPageBreakIsPageBreakAssoc =
      lpsrVarValAssoc::create (
        inputLineNumber,
        commentedKind,
        lpsrVarValAssoc::kWithBackSlashNo,
        lpsrVarValAssoc::kLilypondMyPageBreak,
        lpsrVarValAssoc::kVarValSeparatorEqualSign,
        lpsrVarValAssoc::kQuotesAroundValueNo,
        "{ \\pageBreak }",
        lpsrVarValAssoc::g_LilyPondVarValAssocNoUnit,
        kFontStyleNone,
        kFontWeightNone,
        "Pick your choice from the next two lines as needed",
        lpsrVarValAssoc::kEndlNone);
  }

  // create the 'myPageBreakIsEmpty' assoc
  {
    lpsrVarValAssoc::lpsrCommentedKind
      commentedKind =
        gGlobalLpsr2LilypondOah->fIgnoreMusicXMLLineBreaks
          ? lpsrVarValAssoc::kCommentedNo
          : lpsrVarValAssoc::kCommentedYes;

    fMyPageBreakIsEmptyAssoc =
      lpsrVarValAssoc::create (
        inputLineNumber,
        commentedKind,
        lpsrVarValAssoc::kWithBackSlashNo,
        lpsrVarValAssoc::kLilypondMyPageBreak,
        lpsrVarValAssoc::kVarValSeparatorEqualSign,
        lpsrVarValAssoc::kQuotesAroundValueNo,
        "{ }",
        lpsrVarValAssoc::g_LilyPondVarValAssocNoUnit,
        kFontStyleNone,
        kFontWeightNone,
        lpsrVarValAssoc::g_LilyPondVarValAssocNoComment,
        lpsrVarValAssoc::kEndlOnce);
  }

  if (gGlobalLpsr2LilypondOah->fGlobal) {
    // create the 'global' assoc
    fScoreGlobalAssoc =
      lpsrVarValAssoc::create (
        inputLineNumber,
        lpsrVarValAssoc::kCommentedNo,
        lpsrVarValAssoc::kWithBackSlashNo,
        lpsrVarValAssoc::kLilypondGlobal,
        lpsrVarValAssoc::kVarValSeparatorEqualSign,
        lpsrVarValAssoc::kQuotesAroundValueNo,
        "{ }",
        lpsrVarValAssoc::g_LilyPondVarValAssocNoUnit,
        kFontStyleNone,
        kFontWeightNone,
        "Place whatever you need in the 'global' variable",
        lpsrVarValAssoc::kEndlOnce);
  }
}

lpsrScore::~lpsrScore ()
{}

void lpsrScore::setScoreGlobalStaffSizeSchemeVariable (float size)
{
  stringstream s;

  s << size;

#ifdef TRACE_OAH
  if (gGlobalTraceOahGroup->fTraceGeometry) {
    gLogOstream <<
      "Setting score global staff size Scheme variable to '" <<
      size <<
      "'" <<
      endl;
  }
#endif

  string sizeAsString = s.str ();

  fScoreGlobalStaffSizeSchemeVariable->
    setVariableValue (sizeAsString);
}

void lpsrScore::setJianpuFileIncludeIsNeeded ()
{
  if (! fScmAndAccregSchemeModulesAreNeeded) {
    addJianpuFileIncludeToScore ();

    fJianpuFileIncludeIsNeeded = true;
  }
}

void lpsrScore::setScmAndAccregSchemeModulesAreNeeded ()
{
  if (! fScmAndAccregSchemeModulesAreNeeded) {
    addAccordionRegistrationSchemeModulesToScore ();

    fScmAndAccregSchemeModulesAreNeeded = true;
  }
}

void lpsrScore::setCustomShortBarlineSchemeFunctionIsNeeded ()
{
  if (! fCustomShortBarlineSchemeFunctionIsNeeded) {
    addCustomShortBarlineSchemeFunctionToScore ();

    fCustomShortBarlineSchemeFunctionIsNeeded = true;
  }
}

void lpsrScore::setTongueSchemeFunctionIsNeeded ()
{
  if (! fTongueSchemeFunctionIsNeeded) {
    addTongueSchemeFunctionToScore ();

    fTongueSchemeFunctionIsNeeded = true;
  }
}

void lpsrScore::setEditorialAccidentalSchemeFunctionIsNeeded ()
{
  if (! fEditorialAccidentalSchemeFunctionIsNeeded) {
    addEditorialAccidentalSchemeFunctionToScore ();

    fEditorialAccidentalSchemeFunctionIsNeeded = true;
  }
}

void lpsrScore::setDynamicsSchemeFunctionIsNeeded ()
{
  if (! fDynamicsSchemeFunctionIsNeeded) {
    addDynamicsSchemeFunctionToScore ();

    fDynamicsSchemeFunctionIsNeeded = true;
  }
}

void lpsrScore::setTupletsCurvedBracketsSchemeFunctionIsNeeded ()
{
  if (! fTupletsCurvedBracketsSchemeFunctionIsNeeded) {
    addTupletsCurvedBracketsSchemeFunctionToScore ();

    fTupletsCurvedBracketsSchemeFunctionIsNeeded = true;
  }
}

void lpsrScore::setAfterSchemeFunctionIsNeeded ()
{
  if (! fAfterSchemeFunctionIsNeeded) {
    addAfterSchemeFunctionToScore ();

    fAfterSchemeFunctionIsNeeded = true;
  }
}

void lpsrScore::setTempoRelationshipSchemeFunctionIsNeeded ()
{
  if (! fTempoRelationshipSchemeFunctionIsNeeded) {
    addTempoRelationshipSchemeFunctionToScore ();

    fTempoRelationshipSchemeFunctionIsNeeded = true;
  }
}

void lpsrScore::setGlissandoWithTextSchemeFunctionsIsNeeded ()
{
  if (! fGlissandoWithTextSchemeFunctionsIsNeeded) {
    addGlissandoWithTextSchemeFunctionsToScore ();

    fGlissandoWithTextSchemeFunctionsIsNeeded = true;
  }
}

void lpsrScore::setOtherDynamicSchemeFunctionIsNeeded ()
{
  if (! fOtherDynamicSchemeFunctionIsNeeded) {
    addOtherDynamicSchemeFunctionToScore ();

    fOtherDynamicSchemeFunctionIsNeeded = true;
  }
}

void lpsrScore::setDampMarkupIsNeeded ()
{
  if (! fDampMarkupIsNeeded) {
    addDampMarkupToScore ();

    fDampMarkupIsNeeded = true;
  }
}

void lpsrScore::setDampAllMarkupIsNeeded ()
{
  if (! fDampAllMarkupIsNeeded) {
    addDampAllMarkupToScore ();

    fDampAllMarkupIsNeeded = true;
  }
}

void lpsrScore::setWhiteNoteHeadsIsNeeded ()
{
  if (! fWhiteNoteHeadsIsNeeded) {
    addWhiteNoteHeadsToScore ();

    fWhiteNoteHeadsIsNeeded = true;
  }
}

void lpsrScore::setBoxAroundNextBarNumberIsNeeded ()
{
  if (! fBoxAroundNextBarNumberIsNeeded) {
    addBoxAroundNextBarNumberToScore ();

    fBoxAroundNextBarNumberIsNeeded = true;
  }
}

void lpsrScore::setJazzChordsDisplayIsNeeded ()
{
  if (! fJazzChordsDisplayIsNeeded) {
    addJazzChordsDisplayToScore ();

    fJazzChordsDisplayIsNeeded = true;
  }
}

void lpsrScore::setColoredLedgerLinesIsNeeded ()
{
  if (! fColoredLedgerLinesIsNeeded) {
    addColoredLedgerLinesToScore ();

    fColoredLedgerLinesIsNeeded = true;
  }
}

void lpsrScore::setHiddenMeasureAndBarlineIsNeeded ()
{
  if (! fHiddenMeasureAndBarlineIsNeeded) {
    addHiddenMeasureAndBarlineToScore ();

    fHiddenMeasureAndBarlineIsNeeded = true;
  }
}

void lpsrScore::setMergeRestsIsNeeded ()
{
  if (! fMergeRestsIsNeeded) {
    addMergeRestsToScore ();

    fMergeRestsIsNeeded = true;
  }
}

void lpsrScore::addDateAndTimeSchemeFunctionsToScore ()
{
  string
    schemeFunctionName =
      "date & time",

    schemeFunctionDescription =
R"(
% A set of functions to obtain a source file's modification time.
)",

    schemeFunctionCode =
R"(
#(define comml           (object->string (command-line)))
#(define loc             (+ (string-rindex comml #\space ) 2))
#(define commllen        (- (string-length comml) 2))
#(define filen           (substring comml loc commllen))
#(define siz             (object->string (stat:size (stat filen))))
#(define ver             (object->string (lilypond-version)))
#(define dat             (strftime "%d/%m/%Y" (localtime (current-time))))
#(define tim             (strftime "%H:%M:%S" (localtime (current-time))))
#(define modTime         (stat:mtime (stat filen)))
#(define modTimeAsString (strftime "%d/%m/%Y - %H:%M:%S" (localtime modTime)))
)";

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme functions for '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

void lpsrScore::addPointAndClickOffSchemeFunctionsToScore ()
{
  string
    schemeFunctionName =
      "pointAndClickOff",

    schemeFunctionDescription =
R"(
% \pointAndClickOff to reduce the size of the produced PDF file.
)",

    schemeFunctionCode =
R"(
\pointAndClickOff
)";

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme functions for '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

void lpsrScore::addGlissandoWithTextSchemeFunctionsToScore ()
{
  string
    schemeFunctionName =
      "glissandoWithText",

    schemeFunctionDescription =
R"(
% \\glissandoTextOn/Off to get text along glissandos.
)",

    schemeFunctionCode =
R"(
% thanks to Thomas Morley for contributing this code

%% c/p from lily-library.scm (it is not public)
#(define (sign x)
  (if (= x 0)
      0
      (if (< x 0) -1 1)))

#(define (radians->degree radians)
  (/ (* radians 180) PI))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Glissando with text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Reads from Glissando.details
%%%%   - glissando-text
%%%%   - glissando-text-font-size
%%%%   - glissando-text-padding

#(define* ((gliss-plus-text #:optional always-add-text) grob)
  (let*  ((orig-grob (ly:grob-original grob))
          (broken-beams (ly:spanner-broken-into orig-grob))
          (stil (ly:line-spanner::print grob)))
    (if (or (null? broken-beams)
            (and (pair? broken-beams)
                 (or
                    always-add-text
                    (equal? grob (car broken-beams)))))
        (if (not (ly:stencil? stil))
            #f
            (let* ((layout (ly:grob-layout grob))
                   (line-thickness
                     (ly:output-def-lookup layout 'line-thickness))
                   (props
                     (ly:grob-alist-chain
                       grob
                       (ly:output-def-lookup layout 'text-font-defaults)))
                   (font
                     (ly:paper-get-font
                     layout
                     (cons
                       '((font-encoding . fetaMusic) (font-name . #f))
                       props)))
                   (trill-glyph
                     (ly:font-get-glyph font "scripts.trill_element"))
                   (trill-glyph-height
                     (interval-length (ly:stencil-extent trill-glyph Y)))
                   (zigzag-width
                     (ly:grob-property grob 'zigzag-width))
                   (thickness (ly:grob-property grob 'thickness))
                   (thick
                     (if (number? thickness)
                         (/ thickness 10)
                         line-thickness))
                   (style (ly:grob-property grob 'style))
                   (corr
                     (cond ((eq? style 'trill)
                             trill-glyph-height)
                           ((eq? style 'zigzag)
                             (+ thick zigzag-width))
                           (else 0)))
                   (stil-x-ext (ly:stencil-extent stil X))
                   (stil-y-ext (ly:stencil-extent stil Y))
                   (stil-x-length (- (cdr stil-x-ext) (car stil-x-ext)))
                   (stil-y-length (- (cdr stil-y-ext) (car stil-y-ext)))
                   (details (ly:grob-property grob 'details))
                   (gliss-text
                     (assoc-get 'glissando-text details "gliss."))
                   (gliss-text-font-size
                     (assoc-get 'glissando-text-font-size details -5))
                   (gliss-text-padding
                     (assoc-get 'glissando-text-padding details 0.5))
                   (left-bound-info (ly:grob-property grob 'left-bound-info))
                   (y-left (assoc-get 'Y left-bound-info))
                   (right-bound-info (ly:grob-property grob 'right-bound-info))
                   (y-right (assoc-get 'Y right-bound-info))
                   (slant (sign (- y-right y-left)))
                   (gradient
                     (/ (- stil-y-length corr) stil-x-length))
                   ;; `ly:stencil-rotate' needs an angle in degrees...
                   ;; TODO use ly:angle ?
                   (alpha
                     (radians->degree
                       (angle
                         (make-rectangular
                           stil-x-length
                           (- stil-y-length corr line-thickness)))))
                   (text-stencil
                     (grob-interpret-markup
                       grob
                         (make-halign-markup CENTER
                           (make-fontsize-markup
                             gliss-text-font-size
                             gliss-text))))
                   (text-stencil-height
                     (interval-length (ly:stencil-extent text-stencil Y)))
                   (y-move
                     (+
                       (/ text-stencil-height 2)
                       gliss-text-padding))
                   (rotated-text-stil
                     (ly:stencil-rotate text-stencil (* slant alpha) 0 0))
                   (text-center-X
                     (interval-center (ly:stencil-extent rotated-text-stil X)))
                   (translated-text-stencil
                     (ly:stencil-translate
                       rotated-text-stil
                       ;; Constuction-helpers
                       ;text-stencil
                       ;(make-cross-stencil '(0 . 0)) ;; not included atm
                       (cons
                         (+
                           (car stil-x-ext)
                           (/ stil-x-length 2)
                           (* slant -1 y-move gradient))
                         (+
                           (car stil-y-ext)
                           (/ stil-y-length 2)
                           y-move)))))
            (ly:stencil-add
              stil
              ;; Construction-helpers
              ;;
              ;(make-line-stencil
              ;  0.1
              ;  (+ (car stil-x-ext)(/ stil-x-length 2))
              ;  (+ (car stil-y-ext)(/ stil-y-length 2))
              ;  (+ (car stil-x-ext)(/ stil-x-length 2)(* slant -1 10 gradient))
              ;  10)
              ;;
              ;; (2) colors the text-part
              ;;
              ;(stencil-with-color translated-text-stencil red)
              translated-text-stencil
              )))
        stil)))

glissandoTextOn =
  \temporary \override Glissando.stencil =
    #(gliss-plus-text
      ;; change to true, if added text is wished for both parts of a broken
      ;; glissando
      ;; TODO added text at second parts needs to be improved, vertical
      ;; positioning is sometimes bad
      #f)

glissandoTextOff = \revert Glissando.stencil
)";

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme functions for '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

void lpsrScore::addOtherDynamicSchemeFunctionToScore ()
{
  string
    schemeFunctionName =
      "otherDynamic",

    schemeFunctionDescription =
R"(
% \\otherDynamic to handle any string as dynamics.
)",

    schemeFunctionCode =
R"(
#(use-modules (ice-9 regex))

otherDynamic =
#(define-event-function (parser location text) (markup?)
   (if (string? text)
       (let* ((underscores-replaced
               (string-map
                (lambda (x) (if (eq? x #\_) #\space x))
                text))
              (split-text (string-split underscores-replaced #\space))
              (formatted (map
                          (lambda (word)
                            (if (string-match "^[mrzfps]*$" word)
                                (markup #:dynamic word)
                                (markup #:normal-text #:italic word)))
                          split-text)))
         #{
           #(make-dynamic-script (make-line-markup formatted))
         #})
       ;; user provided a full-blown markup, so we don't mess with it:
       #{
         #(make-dynamic-script (markup #:normal-text text))
       #}))
)";

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme functions for '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

void lpsrScore::addCustomShortBarlineSchemeFunctionToScore ()
{
  string
    schemeModulesName =
      "curstom short barline Scheme function",

    schemeModulesDescription =
R"(
% The function needed to produce curstom short barlines.
)",

    schemeModulesCode =
R"(
#(define ((make-custom-short-bar-line x y) grob extent)
   "Draw a short bar line."
   (let* ((short-staff (* 1/2 (ly:staff-symbol-staff-space grob)))
          (staff-line-thickness (ly:staff-symbol-line-thickness grob))
          (height (interval-end extent)))
     (bar-line::draw-filled-box
      (cons 0 (+ x staff-line-thickness))
      (cons (- height (* 7 short-staff) x) (- height short-staff x))
      staff-line-thickness
      extent
      grob)))

#(add-bar-glyph-print-procedure "/" (make-custom-short-bar-line 0.1 0.1))

#(define-bar-line "/" "/" #f #f)
)";


#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Including Jianpu definition file '" << schemeModulesName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeModulesName,
        schemeModulesDescription,
        schemeModulesCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeModulesName] =
    schemeFunction;
}

void lpsrScore::addJianpuFileIncludeToScore ()
{
  string
    schemeModulesName =
      "jianpu include file",

    schemeModulesDescription =
R"(
% The definitions needed to produce jianpu scores.
)",

    schemeModulesCode =
R"(
% From https://github.com/nybbs2003/lilypond-Jianpu
\include "jianpu10a.ly"
)";

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Including Jianpu definition file '" << schemeModulesName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeModulesName,
        schemeModulesDescription,
        schemeModulesCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeModulesName] =
    schemeFunction;
}

void lpsrScore::addAccordionRegistrationSchemeModulesToScore ()
{
  string
    schemeModulesName =
      "scm & accreg",

    schemeModulesDescription =
R"(
% Two modules are to be used in the right order to use accordion registration.
)",

    schemeModulesCode =
R"(
#(use-modules (scm accreg))
)";

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Using Scheme modules '" << schemeModulesName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeModulesName,
        schemeModulesDescription,
        schemeModulesCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeModulesName] =
    schemeFunction;
}

void lpsrScore::addTongueSchemeFunctionToScore ()
{
  string
    schemeFunctionName =
      "tongue",

    schemeFunctionDescription =
R"(
% Creates multiple tongue technicals, argument is a number.
% Example: 'c4 -\tongue #3' creates a triple tongue.
)",

    schemeFunctionCode =
R"(
tongue =
#(define-music-function (parser location dots) (integer?)
   (let ((script (make-music 'ArticulationEvent
                   'articulation-type "staccato")))
     (set! (ly:music-property script 'tweaks)
           (acons 'stencil
             (lambda (grob)
               (let ((stil (ly:script-interface::print grob)))
                 (let loop ((count (1- dots)) (new-stil stil))
                   (if (> count 0)
                       (loop (1- count)
                         (ly:stencil-combine-at-edge new-stil X RIGHT stil 0.2))
                       (ly:stencil-aligned-to new-stil X CENTER)))))
             (ly:music-property script 'tweaks)))
     script))
)";

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme function '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

void lpsrScore::addEditorialAccidentalSchemeFunctionToScore ()
{
  string
    schemeFunctionName =
      "editorialAccidental",

    schemeFunctionDescription =
R"(
% Craetes editorial accidentals as LilyPond musica ficta.
% Example: '\editorialAccidental cis4'.
)",

    schemeFunctionCode =
R"(
editorialAccidental =
#(define-music-function
  (note)
  (ly:music?)
  #{
    \once\accidentalStyle forget
    \once\set suggestAccidentals = ##t
    #note
  #})
)";

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme function '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

void lpsrScore::addDynamicsSchemeFunctionToScore ()
{
  string
    schemeFunctionName =
      "dynamics",

    schemeFunctionDescription =
R"(
% Creates variables define dynamics not native to LilyPond.
)",

    schemeFunctionCode =
R"(
rf = #(make-dynamic-script "rf")
sfpp = #(make-dynamic-script "sfpp")
sffz = #(make-dynamic-script "sffz")
ppppp = #(make-dynamic-script "ppppp")
pppppp = #(make-dynamic-script "pppppp")
fffff = #(make-dynamic-script "fffff")
ffffff = #(make-dynamic-script "ffffff")
)";

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme function '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

void lpsrScore::addTupletsCurvedBracketsSchemeFunctionToScore ()
{
  string
    schemeFunctionName =
      "tupletsCurvedBrackets",

    schemeFunctionDescription =
R"(
% A function to draw curved tuplets brackets, not native to LilyPond.
% Thanks to Ben, mailto:soundsfromsound@gmail.com
)",

    schemeFunctionCode =
R"(
tupletsCurvedBrackets = {
  % Use slur-stencil
  \override TupletBracket.stencil = #ly:slur::print
  %% Use 'thickness from Slur
  \override TupletBracket.thickness = #1.2
  %% 'control-points need to be set
  \override TupletBracket.control-points =
  #(lambda (grob)
     (let* ((x-pos (ly:grob-property grob 'X-positions))
            (pos (ly:grob-property grob 'positions))
            (x-ln (interval-length x-pos))
            (dir (ly:grob-property grob 'direction))
            ;; read out the height of the TupletBracket, may be
            ;; negative!
            (height (- (cdr pos) (car pos)))
            ;; height-corr is introduced because sometimes the shape
            ;; of the slur needs to be adjusted.
            ;; It is used in the 2nd/3rd control-point.
            ;; The value of 0.3 is found by trial and error
            (height-corr (* 0.3 dir height))
            (edge-height (ly:grob-property grob 'edge-height
                           '(0.7 . 0.7)))
            (pad 1.0))
       (list
        ;; first cp
        (cons
         (+ (car x-pos) 0.5)
         (- (+ (* dir pad) (+ (car pos) (* -1 dir
                                          (car edge-height))))
           (if (= dir -1)
               (if (> height 3)
                   (/ dir 2.0)
                   0.0)
               (if (< height -3)
                   (/ dir 2.0)
                   0.0))))
        ;; second cp
        (cons
         (+ (car x-pos) (* x-ln 1/4))
         (+ (* dir pad) (+ (car pos) (* dir (+ 0.5 height-corr)))))
        ;; third cp
        (cons
         (+ (car x-pos) (* x-ln 3/4))
         (+ (* dir pad) (+ (cdr pos) (* dir (- 0.5 height-corr)))))
        ;; fourth cp
        (cons
         (- (cdr x-pos) 0.5)
         (+ (* dir pad) (+ (cdr pos) (* -1 dir (cdr edge-height)))))
        )))
  \override TupletBracket.staff-padding = #' ()
  #(define (invert-direction x) (if (eq? UP
                                         (ly:tuplet-bracket::calc-direction x)) DOWN UP))
  % \override TupletBracket.direction = #invert-direction
}
)";

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme function '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

void lpsrScore::addAfterSchemeFunctionToScore ()
{
  string
    schemeFunctionName =
      "after",

    schemeFunctionDescription =
R"(
% A function to create events after given music.
% Thanks to David Kastrup for the inspiration!
)",

    schemeFunctionCode =
R"(
after =
#(define-music-function (t e m) (ly:duration? ly:music? ly:music?)
   #{
     \context Bottom <<
       #m
       { \skip $t <> -\tweak extra-spacing-width #empty-interval $e }
     >>
   #})
)";

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme function '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

void lpsrScore::addTempoRelationshipSchemeFunctionToScore ()
{
  string
    schemeFunctionName =
      "tempoRelationship",

    schemeFunctionDescription =
R"(
% A function to create tempo relationships,
% such as 'b8 [ b8 ]' = '\tuplet 3/2 { b4 b8 }' for swing.
% See http://lsr.di.unimi.it/LSR/Item?id=204
)",

    schemeFunctionCode =
      // add ! before ( and after ) since the code contains )"
R"!(
tempoRelationshipStaffReduce = #-3

tempoRelationship =
#(define-music-function (parser location label parenthesized musicI musicII)
   (string? boolean? ly:music? ly:music?)
   (let* (
           (left-paren (if parenthesized "(" ""))
           (right-paren (if parenthesized ")" ""))
           )
     #{
       \tempo \markup {
         \line \general-align #Y #DOWN {
           % 1st column in line
           $label

           % 2nd column in line

           $left-paren

           \score {
             \new Staff \with {
               % reduce the font size a la cue
               fontSize = #tempoRelationshipStaffReduce
               \override StaffSymbol.staff-space = #(magstep tempoRelationshipStaffReduce)
               % hide the staff lines
               \override StaffSymbol.line-count = #0
               % align horizontally
               \override VerticalAxisGroup.Y-extent = #'(-0.85 . 0)
             }

             {
               % \override Score.SpacingSpanner.common-shortest-duration = #(ly:make-moment 1/2) % super-tight
               % \override Score.SpacingSpanner.common-shortest-duration = #(ly:make-moment 1/4) % tight
               % \override Score.SpacingSpanner.common-shortest-duration = #(ly:make-moment 3/16) % even
               \override Score.SpacingSpanner.common-shortest-duration = #(ly:make-moment 5/32) % even

               % the left music
               \relative c' { \stemUp $musicI }

               % the equivalence sign
               \once \override Score.TextScript.Y-offset = #-0.4
               s4.^\markup{
                 \halign #-1 "="
               }

               % the right music
               \relative c' { \stemUp $musicII }
             }

             \layout {
               indent = 0
               \context {
                 \Staff
                 \remove "Clef_engraver"
                 \remove "Time_signature_engraver"
               }
             } % layout end
           } % score end

           $right-paren

         } % line end
       } % markup end
     #}))
)!";

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme function '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

void lpsrScore::addDampMarkupToScore ()
{
  string
    schemeFunctionName =
      "dampMarkup",

    schemeFunctionDescription =
R"(
% A function to create damp markups,
)",

    schemeFunctionCode =
      // add ! before ( and after ) since the code contains )"
R"!(
damp = \markup {
%  \scale #'(5 . 5)
  {
    \center-column {
      {
        \override #'(thickness . 1.8)
        \combine \draw-line #'(-1.5 . 0)
        \combine \draw-line #'(0 . -1.5)
        \combine \draw-line #'(0 . 1.5)
        \combine \draw-line #'(1.5 . 0)
        \draw-circle #0.8 #0.2 ##f
      }
    }
  }

}
)!";

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme function '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

void lpsrScore::addDampAllMarkupToScore ()
{
  string
    schemeFunctionName =
      "dampAllMarkup",

    schemeFunctionDescription =
R"(
% A function to create damp all markups,
)",

    schemeFunctionCode =
      // add ! before ( and after ) since the code contains )"
R"!(
dampAll = \markup
%% do not use 'fontsize
%\scale #'(5 . 5)
{
  \combine \bold "O"
  \path #0.2
  #'((moveto -.4 .8)(lineto 2.2 .8)
      (closepath)
      (moveto .9 -.5)(lineto .9 2.1))
}
)!";

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme function '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

void lpsrScore::addWhiteNoteHeadsToScore ()
{
  string
    schemeFunctionName =
      "whiteNoteHeads",

    schemeFunctionDescription =
R"(
% A function to display note shorter than a quarter with white heads,
% as in some ancient music scores
)",

    schemeFunctionCode =
      // add ! before ( and after ) since the code contains )"
R"!(
whiteNoteHeads =
#(define-music-function (music) (ly:music?)
   #{
     \temporary \override NoteHead.stencil = #ly:text-interface::print
     \temporary \override NoteHead.text = \markup {
       \musicglyph "noteheads.s1"
     }
     \omit \time 3/4
     \shiftDurations #1 #0 { #music }
     \omit \time 3/2
     \revert NoteHead.stencil
     \revert NoteHead.text
   #}
   )
)!";

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme function '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

void lpsrScore::addBoxAroundNextBarNumberToScore ()
{
  string
    schemeFunctionName =
      "boxAroundNextBarNumber",

    schemeFunctionDescription =
R"(
% A macro to draw a box round the next bar number
)",

    schemeFunctionCode =
      // add ! before ( and after ) since the code contains )"
R"!(
boxAroundNextBarNumber = {
  % Prevent bar numbers at the end of a line
  \once\override Score.BarNumber.break-visibility = #end-of-line-invisible

  \once\override Score.BarNumber.font-size = 2
  \once\override Score.BarNumber.stencil =
  #(make-stencil-boxer 0.25 0.5 ly:text-interface::print)
}
)!";

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme function '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

void lpsrScore::addJazzChordsDisplayToScore ()
{
  stringstream s;

  s <<
R"###(% Exception music is chords with markups
#(define (lower-extension pitch chbass)
   "Return lowered markup for pitch note name."
   #{
     \markup \raise #-1.9 \halign #0.2
     #(note-name->markup pitch chbass)
   #})

chExceptionMusic = {)###" <<
      endl;

    if (gGlobalLpsr2LilypondOah->fJazzChordsDisplay) {
      s <<
        gGlobalLpsr2LilypondOah->fJazzChordsDisplayLilypondcode;
    }

  list<pair<string, string> >&
    chordsDisplayList =
      gGlobalLpsr2LilypondOah->fChordsDisplayList;

  if (chordsDisplayList.size ()) {
    list<pair<string, string> >::const_iterator
      iBegin = chordsDisplayList.begin (),
      iEnd   = chordsDisplayList.end (),
      i      = iBegin;

    for ( ; ; ) {
      s <<
        gTab <<
        (*i).first <<
        "1-\\markup { " <<
        (*i).second <<
        " }" <<
        endl;
      if (++i == iEnd) break;
  //     s << endl;
    } // for
  }

  s <<
    "}" <<
    endl <<
    endl <<
R"###(% Convert music to list and prepend to existing exceptions.
chExceptions = #( append
                  ( sequential-music-to-chord-exceptions chExceptionMusic #t)
                  ignatzekExceptions))###" <<
    endl <<
    endl;

  string
    schemeFunctionName =
      "jazzChordsDisplay",

  schemeFunctionDescription =
R"(
% A function to display the chords in a common Jazz way using \chordmode
)",

  schemeFunctionCode = s.str ();

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme function '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

void lpsrScore::addColoredLedgerLinesToScore ()
{
  stringstream s;

  s <<
R"###(% there is ony one ledger line spanner/grob/stencil
% produced for each musical system on the page (!)
% see: ledger-line-spanner.cc for c++ code for ly:ledger-line-spanner::print

#(define (MyLedgerLineSpannerPrint grob)
   (let*
    ((stil (ly:ledger-line-spanner::print grob))
     ;; (ifaces (ly:grob-interfaces grob))

     (noteheads (ly:grob-object grob 'note-heads))
     (new-stil (box-stencil (stencil-with-color stil  (rgb-color )###";

  s <<
    gGlobalLpsr2LilypondOah->fLedgerLinesRGBColor.getR () <<
    " " <<
    gGlobalLpsr2LilypondOah->fLedgerLinesRGBColor.getG () <<
    " " <<
    gGlobalLpsr2LilypondOah->fLedgerLinesRGBColor.getB ();

  s <<
R"###()) 0.1 1))
     )

    (display "noteheads: ")(display noteheads)(newline)(newline)
    ;; (display (ly:grob-properties grob))(newline)(newline)
    ;; (display ifaces)(newline)(newline)

    new-stil))
)###";

  string
    schemeFunctionName =
      "coloredLedgerLines",

  schemeFunctionDescription =
R"(
% A function to color the staves ledger lines other that black
)",

  schemeFunctionCode = s.str ();

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme function '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

void lpsrScore::addHiddenMeasureAndBarlineToScore ()
{
  stringstream s;

  s <<
R"###(hiddenMeasureAndBarLine = {
  % the hidden measure and bar line
  % \cadenzaOn turns off automatic calculation of bar numbers
  \cadenzaOn
  \once \omit Score.TimeSignature
  \time 1/16
  s16 \bar ""
  \cadenzaOff
}
)###";

  string
    schemeFunctionName =
      "hiddenMeasureAndBarline",

  schemeFunctionDescription =
R"(
% A function to avoid having two marks at the same point in time,
% which LilyPond doesn't allow
)",

  schemeFunctionCode = s.str ();

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme function '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

void lpsrScore::addMergeRestsToScore ()
{
  stringstream s;

  s <<
R"###(%% http://lsr.di.unimi.it/LSR/Item?id=336
%% see also http://code.google.com/p/lilypond/issues/detail?id=1228

%% Usage:
%%   \new Staff \with {
%%     \override RestCollision.positioning-done = #merge-rests-on-positioning
%%   }
%%   << \somevoice \\ \othervoice >>
%% or (globally):
%%   \layout {
%%     \context {
%%       \Staff
%%       \override RestCollision.positioning-done = #merge-rests-on-positioning
%%     }
%%   }
%%
%% Limitations:
%% - only handles two voices
%% - does not handle multi-measure/whole-measure rests

#(define (rest-score r)
   (let ((score 0)
         (yoff (ly:grob-property-data r 'Y-offset))
         (sp (ly:grob-property-data r 'staff-position)))
     (if (number? yoff)
         (set! score (+ score 2))
         (if (eq? yoff 'calculation-in-progress)
             (set! score (- score 3))))
     (and (number? sp)
          (<= 0 2 sp)
          (set! score (+ score 2))
          (set! score (- score (abs (- 1 sp)))))
     score))

#(define (merge-rests-on-positioning grob)
   (let* ((can-merge #f)
          (elts (ly:grob-object grob 'elements))
          (num-elts (and (ly:grob-array? elts)
                         (ly:grob-array-length elts)))
          (two-voice? (= num-elts 2)))
     (if two-voice?
         (let* ((v1-grob (ly:grob-array-ref elts 0))
                (v2-grob (ly:grob-array-ref elts 1))
                (v1-rest (ly:grob-object v1-grob 'rest))
                (v2-rest (ly:grob-object v2-grob 'rest)))
           (and
            (ly:grob? v1-rest)
            (ly:grob? v2-rest)
            (let* ((v1-duration-log (ly:grob-property v1-rest 'duration-log))
                   (v2-duration-log (ly:grob-property v2-rest 'duration-log))
                   (v1-dot (ly:grob-object v1-rest 'dot))
                   (v2-dot (ly:grob-object v2-rest 'dot))
                   (v1-dot-count (and (ly:grob? v1-dot)
                                      (ly:grob-property v1-dot 'dot-count -1)))
                   (v2-dot-count (and (ly:grob? v2-dot)
                                      (ly:grob-property v2-dot 'dot-count -1))))
              (set! can-merge
                    (and
                     (number? v1-duration-log)
                     (number? v2-duration-log)
                     (= v1-duration-log v2-duration-log)
                     (eq? v1-dot-count v2-dot-count)))
              (if can-merge
                  ;; keep the rest that looks best:
                  (let* ((keep-v1? (>= (rest-score v1-rest)
                                       (rest-score v2-rest)))
                         (rest-to-keep (if keep-v1? v1-rest v2-rest))
                         (dot-to-kill (if keep-v1? v2-dot v1-dot)))
                    ;; uncomment if you're curious of which rest was chosen:
                    ;;(ly:grob-set-property! v1-rest 'color green)
                    ;;(ly:grob-set-property! v2-rest 'color blue)
                    (ly:grob-suicide! (if keep-v1? v2-rest v1-rest))
                    (if (ly:grob? dot-to-kill)
                        (ly:grob-suicide! dot-to-kill))
                    (ly:grob-set-property! rest-to-keep 'direction 0)
                    (ly:rest::y-offset-callback rest-to-keep)))))))
     (if can-merge
         #t
         (ly:rest-collision::calc-positioning-done grob))))
)###";

  string
    schemeFunctionName =
      "MergeRests",

  schemeFunctionDescription =
R"(
% Functions to merge rests in two voices
)",

  schemeFunctionCode = s.str ();

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceSchemeFunctions) {
    gLogOstream <<
      "Creating Scheme function '" << schemeFunctionName << "'" <<
      endl;
  }
#endif

  // create the Scheme function
  S_lpsrSchemeFunction
    schemeFunction =
      lpsrSchemeFunction::create (
        1, // inputLineNumber, JMI ???
        schemeFunctionName,
        schemeFunctionDescription,
        schemeFunctionCode);

  // register it in the Scheme functions map
  fScoreSchemeFunctionsMap [schemeFunctionName] =
    schemeFunction;
}

/* JMI
void lpsrScore::appendVoiceUseToStoreCommand (S_msrVoice voice)
{
  S_lpsrUseVoiceCommand
    useVoiceCommand =
      lpsrUseVoiceCommand::create (
        fInputLineNumber,
        voice);

  fScoreBlock->
    appendVoiceUseToParallelMusicBLock (useVoiceCommand);
}

void lpsrScore::appendLyricsUseToStoreCommand (S_msrStanza stanza)
{
  S_lpsrNewLyricsBlock
    newLyricsCommand =
      lpsrNewLyricsBlock::create (
        fInputLineNumber,
        stanza,
        stanza->getStanzaVoiceUpLink ());

  fScoreBlock->
    appendLyricsUseToParallelMusicBLock (newLyricsCommand);
}
*/

void lpsrScore::acceptIn (basevisitor* v)
{
#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceLpsrVisitors) {
    gLogOstream <<
      "% ==> lpsrScore::acceptIn ()" <<
      endl;
  }
#endif

  if (visitor<S_lpsrScore>*
    p =
      dynamic_cast<visitor<S_lpsrScore>*> (v)) {
        S_lpsrScore elem = this;

#ifdef TRACE_OAH
        if (gGlobalLpsrOah->fTraceLpsrVisitors) {
          gLogOstream <<
            "% ==> Launching lpsrScore::visitStart ()" <<
            endl;
        }
#endif
        p->visitStart (elem);
  }
}

void lpsrScore::acceptOut (basevisitor* v)
{
#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceLpsrVisitors) {
    gLogOstream <<
      "% ==> lpsrScore::acceptOut ()" <<
      endl;
  }
#endif

  if (visitor<S_lpsrScore>*
    p =
      dynamic_cast<visitor<S_lpsrScore>*> (v)) {
        S_lpsrScore elem = this;

#ifdef TRACE_OAH
        if (gGlobalLpsrOah->fTraceLpsrVisitors) {
          gLogOstream <<
            "% ==> Launching lpsrScore::visitEnd ()" <<
            endl;
        }
#endif
        p->visitEnd (elem);
  }
}

void lpsrScore::browseData (basevisitor* v)
{
#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceLpsrVisitors) {
    gLogOstream <<
      "% ==> lpsrScore::browseData ()" <<
      endl;
  }
#endif

  {
    // browse the score LilyPond version
    msrBrowser<lpsrVarValAssoc> browser (v);
    browser.browse (*fLilypondVersion);
  }

  if (fInputSourceNameComment) {
    // browse the input source name comment
    msrBrowser<lpsrComment> browser (v);
    browser.browse (*fInputSourceNameComment);
  }

  if (fTranslationDateComment) {
    // browse the translation date comment
    msrBrowser<lpsrComment> browser (v);
    browser.browse (*fTranslationDateComment);
  }

  if (fCommandLineAsSuppliedComment) {
    // browse the command line as supplied comment
    msrBrowser<lpsrComment> browser (v);
    browser.browse (*fCommandLineAsSuppliedComment);
  }

  if (fCommandLineLongOptionsComment) {
    // browse the command line long options comment
    msrBrowser<lpsrComment> browser (v);
    browser.browse (*fCommandLineLongOptionsComment);
  }

  if (fCommandLineShortOptionsComment) {
    // browse the command line short options comment
    msrBrowser<lpsrComment> browser (v);
    browser.browse (*fCommandLineShortOptionsComment);
  }

  {
    // browse the score global staff size
    msrBrowser<lpsrSchemeVariable> browser (v);
    browser.browse (*fScoreGlobalStaffSizeSchemeVariable);
  }

  {
    // browse the Scheme function map
    for (
      map<string, S_lpsrSchemeFunction>::const_iterator i =
        fScoreSchemeFunctionsMap.begin ();
      i != fScoreSchemeFunctionsMap.end ();
      i++
  ) {
      // browse the Scheme function
      msrBrowser<lpsrSchemeFunction> browser (v);
      browser.browse (*(*i).second);
    } // for
  }

  {
    // browse the score header
    msrBrowser<lpsrHeader> browser (v);
    browser.browse (*fScoreHeader);
  }

  {
    // browse the score paper
    msrBrowser<lpsrPaper> browser (v);
    browser.browse (*fScorePaper);
  }

  if (fScoreLayout) { // JMI
    // browse the score layout
    msrBrowser<lpsrLayout> browser (v);
    browser.browse (*fScoreLayout);
  }

  {
    // browse the myBreakIsBreak assoc
    msrBrowser<lpsrVarValAssoc> browser (v);
    browser.browse (*fMyBreakIsBreakAssoc);
  }
  {
    // browse the myBreakIsEmpty assoc
    msrBrowser<lpsrVarValAssoc> browser (v);
    browser.browse (*fMyBreakIsEmptyAssoc);
  }

  {
    // browse the myPageBreakIsPageBreak assoc
    msrBrowser<lpsrVarValAssoc> browser (v);
    browser.browse (*fMyPageBreakIsPageBreakAssoc);
  }
  {
    // browse the myPageBreakIsEmpty assoc
    msrBrowser<lpsrVarValAssoc> browser (v);
    browser.browse (*fMyPageBreakIsEmptyAssoc);
  }

  if (fScoreGlobalAssoc) {
    // browse the 'global' assoc
    msrBrowser<lpsrVarValAssoc> browser (v);
    browser.browse (*fScoreGlobalAssoc);
  }

  {
    // browse the voices and stanzas list
    for (
      list<S_msrElement>::const_iterator i = fScoreElementsList.begin ();
      i != fScoreElementsList.end ();
      i++
    ) {
      // browse the element
      msrBrowser<msrElement> browser (v);
      browser.browse (*(*i));
    } // for
  }

  {
    // browse the score blocks list
    for (
      list<S_lpsrBookBlock>::const_iterator i = fScoreBookBlocksList.begin ();
      i != fScoreBookBlocksList.end ();
      i++
    ) {
      // browse the element
      msrBrowser<lpsrBookBlock> browser (v);
      browser.browse (*(*i));
    } // for
  }

#ifdef TRACE_OAH
  if (gGlobalLpsrOah->fTraceLpsrVisitors) {
    gLogOstream <<
      "% <== lpsrScore::browseData ()" <<
      endl;
  }
#endif
}

void lpsrScore::print (ostream& os) const
{
  os <<
    "LPSR Score" <<
    endl <<
    endl;

  gIndenter++;

  // print the MSR structure (without the voices)
  fMsrScore->
    printSummary (os);
  os << endl;

  // are some Scheme functions needed?
  const int fieldWidth = 42;

  os << left <<
    setw (fieldWidth) <<
    "TongueSchemeFunctionIsNeeded" << " : " <<
    booleanAsString (
      fTongueSchemeFunctionIsNeeded) <<
    endl <<
    setw (fieldWidth) <<
    "EditorialAccidentalSchemeFunctionIsNeeded" << " : " <<
    booleanAsString (
      fEditorialAccidentalSchemeFunctionIsNeeded) <<
    endl <<
    endl;

  // print LPSR basic information
  os <<
    fLilypondVersion <<
    endl <<

    fScoreGlobalStaffSizeSchemeVariable <<
    endl <<

    fScoreHeader <<
    // no endl here

    fScorePaper <<
    endl <<

    fScoreLayout <<
    endl;

// myBreakAssoc,myPageBreakAssoc globalAssoc? JMI

  // print the voices and stanzas
  if (fScoreElementsList.size ()) {
    os <<
      "Voices & Stanzas" <<
      endl << endl;
    gIndenter++;

    list<S_msrElement>::const_iterator
      iBegin = fScoreElementsList.begin (),
      iEnd   = fScoreElementsList.end (),
      i      = iBegin;
    for ( ; ; ) {
      os << (*i);
      if (++i == iEnd) break;
      os << endl;
    } // for

    os << endl;
    gIndenter--;
  }

  // print the book blocks
  if (fScoreBookBlocksList.size ()) {
    os <<
      "Book blocks" <<
      endl << endl;
    gIndenter++;

    list<S_lpsrBookBlock>::const_iterator
      iBegin = fScoreBookBlocksList.begin (),
      iEnd   = fScoreBookBlocksList.end (),
      i      = iBegin;
    for ( ; ; ) {
      os << (*i);
      if (++i == iEnd) break;
      os << endl;
    } // for

    os << endl;
    gIndenter--;
  }

  gIndenter--;
}

void lpsrScore::printShort (ostream& os) const
{
  os <<
    "LPSR Score, short version" <<
    endl <<
    endl;

  gIndenter++;

  // print the MSR structure (without the voices)
  fMsrScore->
    printShort (os);
  os << endl;

/*
  // are some Scheme functions needed?
  const int fieldWidth = 42;

  os << left <<
    setw (fieldWidth) <<
    "TongueSchemeFunctionIsNeeded" << " : " <<
    booleanAsString (
      fTongueSchemeFunctionIsNeeded) <<
    endl <<
    setw (fieldWidth) <<
    "EditorialAccidentalSchemeFunctionIsNeeded" << " : " <<
    booleanAsString (
      fEditorialAccidentalSchemeFunctionIsNeeded) <<
    endl <<
    endl;
*/

  os <<
    "LPSR basic information" <<
    endl <<
    endl;

  gIndenter++;

  // print LPSR basic information
  fScoreHeader->printShort (os);
  os << endl;

  fLilypondVersion->printShort (os);
  os << endl;

  fScoreGlobalStaffSizeSchemeVariable->printShort (os);
  os << endl;

  fScorePaper->printShort (os);
  os << endl;

  fScoreLayout->printShort (os);
  os << endl;

// myBreakAssoc,myPageBreakAssoc globalAssoc? JMI

  gIndenter--;

  // print the voices and stanzas
  if (fScoreElementsList.size ()) {
    os <<
      "Voices & Stanzas" <<
      endl << endl;

    gIndenter++;

    list<S_msrElement>::const_iterator
      iBegin = fScoreElementsList.begin (),
      iEnd   = fScoreElementsList.end (),
      i      = iBegin;
    for ( ; ; ) {
      (*i)->printShort (os);
      if (++i == iEnd) break;
      os << endl;
    } // for

    os << endl;
    gIndenter--;
  }

  // print the book blocks
  if (fScoreBookBlocksList.size ()) {
    os <<
      "Book blocks" <<
      endl << endl;
    gIndenter++;

    list<S_lpsrBookBlock>::const_iterator
      iBegin = fScoreBookBlocksList.begin (),
      iEnd   = fScoreBookBlocksList.end (),
      i      = iBegin;
    for ( ; ; ) {
      (*i)->printShort (os);
      if (++i == iEnd) break;
      os << endl;
    } // for

    os << endl;
    gIndenter--;
  }

  gIndenter--;
}

ostream& operator<< (ostream& os, const S_lpsrScore& scr)
{
  scr->print (os);
  return os;
}


}
