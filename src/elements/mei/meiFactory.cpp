/*
  MusicXML Library
  Copyright (C) Grame 2006-2020

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.

  Grame Research Laboratory, 11, cours de Verdun Gensoul 69002 Lyon - France
  research@grame.fr
*/

//======================================================================
// DON'T MODIFY THIS FILE!
// It is automatically generated from the MEI schema.
// (see the schema folder) 
//======================================================================

#ifdef WIN32
# pragma warning (disable : 4786)
#endif

#include <iostream>
#include "elements.h"
#include "factory.h"
#include "types.h"

using namespace std; 

// libmxmllineno is outside of name space MusicXML2
extern int libmxmllineno;


namespace MusicXML2 
{


template<int elt>
class newElementFunctor : public functor<Sxmlelement>
{
  public:
  
    Sxmlelement operator ()()
        { return musicxml<elt>::new_musicxml (libmxmllineno); }
};


Sxmlelement factory::create (const string& eltname) const
{ 
	map<std::string, functor<Sxmlelement>*>::const_iterator i = fMap.find (eltname);
	if (i != fMap.end()) {
		functor<Sxmlelement>* f = i->second;
		if (f) {
			Sxmlelement elt = (*f)();
			elt->setName(eltname);
			return elt;
		}
	}
	cerr << "Sxmlelement factory::create called with unknown element \"" << eltname << "\"" << endl;
	return 0;
}

Sxmlelement factory::create(int type) const
{ 
	map<int, const char*>::const_iterator i = fType2Name.find (type);
	if (i != fType2Name.end()) {
		return create (i->second);
	}
	cerr << "Sxmlelement factory::create called with unknown type \"" << type << "\"" << endl;
	return 0;
}


factory::factory() 
{
	fMap["comment"] 		= new newElementFunctor<kComment>;
	fMap["pi"] 				= new newElementFunctor<kProcessingInstruction>;
	fType2Name[kComment] 	= "comment";
	fType2Name[kProcessingInstruction]  = "pi";

	fMap["a"] 	= new newElementFunctor<k_a>;
	fMap["abbr"] 	= new newElementFunctor<k_abbr>;
	fMap["accMat"] 	= new newElementFunctor<k_accMat>;
	fMap["accessRestrict"] 	= new newElementFunctor<k_accessRestrict>;
	fMap["accid"] 	= new newElementFunctor<k_accid>;
	fMap["acquisition"] 	= new newElementFunctor<k_acquisition>;
	fMap["actor"] 	= new newElementFunctor<k_actor>;
	fMap["add"] 	= new newElementFunctor<k_add>;
	fMap["addDesc"] 	= new newElementFunctor<k_addDesc>;
	fMap["addName"] 	= new newElementFunctor<k_addName>;
	fMap["addrLine"] 	= new newElementFunctor<k_addrLine>;
	fMap["address"] 	= new newElementFunctor<k_address>;
	fMap["altGlyph"] 	= new newElementFunctor<k_altGlyph>;
	fMap["altGlyphDef"] 	= new newElementFunctor<k_altGlyphDef>;
	fMap["altGlyphItem"] 	= new newElementFunctor<k_altGlyphItem>;
	fMap["altId"] 	= new newElementFunctor<k_altId>;
	fMap["ambNote"] 	= new newElementFunctor<k_ambNote>;
	fMap["ambitus"] 	= new newElementFunctor<k_ambitus>;
	fMap["analytic"] 	= new newElementFunctor<k_analytic>;
	fMap["anchoredText"] 	= new newElementFunctor<k_anchoredText>;
	fMap["animate"] 	= new newElementFunctor<k_animate>;
	fMap["animateColor"] 	= new newElementFunctor<k_animateColor>;
	fMap["animateMotion"] 	= new newElementFunctor<k_animateMotion>;
	fMap["animateTransform"] 	= new newElementFunctor<k_animateTransform>;
	fMap["annot"] 	= new newElementFunctor<k_annot>;
	fMap["app"] 	= new newElementFunctor<k_app>;
	fMap["appInfo"] 	= new newElementFunctor<k_appInfo>;
	fMap["application"] 	= new newElementFunctor<k_application>;
	fMap["argument"] 	= new newElementFunctor<k_argument>;
	fMap["arpeg"] 	= new newElementFunctor<k_arpeg>;
	fMap["arranger"] 	= new newElementFunctor<k_arranger>;
	fMap["artic"] 	= new newElementFunctor<k_artic>;
	fMap["attUsage"] 	= new newElementFunctor<k_attUsage>;
	fMap["attacca"] 	= new newElementFunctor<k_attacca>;
	fMap["audience"] 	= new newElementFunctor<k_audience>;
	fMap["author"] 	= new newElementFunctor<k_author>;
	fMap["avFile"] 	= new newElementFunctor<k_avFile>;
	fMap["availability"] 	= new newElementFunctor<k_availability>;
	fMap["bTrem"] 	= new newElementFunctor<k_bTrem>;
	fMap["back"] 	= new newElementFunctor<k_back>;
	fMap["barLine"] 	= new newElementFunctor<k_barLine>;
	fMap["barre"] 	= new newElementFunctor<k_barre>;
	fMap["beam"] 	= new newElementFunctor<k_beam>;
	fMap["beamSpan"] 	= new newElementFunctor<k_beamSpan>;
	fMap["beatRpt"] 	= new newElementFunctor<k_beatRpt>;
	fMap["bend"] 	= new newElementFunctor<k_bend>;
	fMap["bibl"] 	= new newElementFunctor<k_bibl>;
	fMap["biblList"] 	= new newElementFunctor<k_biblList>;
	fMap["biblScope"] 	= new newElementFunctor<k_biblScope>;
	fMap["biblStruct"] 	= new newElementFunctor<k_biblStruct>;
	fMap["bifolium"] 	= new newElementFunctor<k_bifolium>;
	fMap["binding"] 	= new newElementFunctor<k_binding>;
	fMap["bindingDesc"] 	= new newElementFunctor<k_bindingDesc>;
	fMap["bloc"] 	= new newElementFunctor<k_bloc>;
	fMap["body"] 	= new newElementFunctor<k_body>;
	fMap["bracketSpan"] 	= new newElementFunctor<k_bracketSpan>;
	fMap["breath"] 	= new newElementFunctor<k_breath>;
	fMap["byline"] 	= new newElementFunctor<k_byline>;
	fMap["caesura"] 	= new newElementFunctor<k_caesura>;
	fMap["caption"] 	= new newElementFunctor<k_caption>;
	fMap["captureMode"] 	= new newElementFunctor<k_captureMode>;
	fMap["carrierForm"] 	= new newElementFunctor<k_carrierForm>;
	fMap["castGrp"] 	= new newElementFunctor<k_castGrp>;
	fMap["castItem"] 	= new newElementFunctor<k_castItem>;
	fMap["castList"] 	= new newElementFunctor<k_castList>;
	fMap["catRel"] 	= new newElementFunctor<k_catRel>;
	fMap["catchwords"] 	= new newElementFunctor<k_catchwords>;
	fMap["category"] 	= new newElementFunctor<k_category>;
	fMap["cb"] 	= new newElementFunctor<k_cb>;
	fMap["cc"] 	= new newElementFunctor<k_cc>;
	fMap["chan"] 	= new newElementFunctor<k_chan>;
	fMap["chanPr"] 	= new newElementFunctor<k_chanPr>;
	fMap["change"] 	= new newElementFunctor<k_change>;
	fMap["changeDesc"] 	= new newElementFunctor<k_changeDesc>;
	fMap["choice"] 	= new newElementFunctor<k_choice>;
	fMap["chord"] 	= new newElementFunctor<k_chord>;
	fMap["chordDef"] 	= new newElementFunctor<k_chordDef>;
	fMap["chordMember"] 	= new newElementFunctor<k_chordMember>;
	fMap["chordTable"] 	= new newElementFunctor<k_chordTable>;
	fMap["circle"] 	= new newElementFunctor<k_circle>;
	fMap["classDecls"] 	= new newElementFunctor<k_classDecls>;
	fMap["classification"] 	= new newElementFunctor<k_classification>;
	fMap["clef"] 	= new newElementFunctor<k_clef>;
	fMap["clefGrp"] 	= new newElementFunctor<k_clefGrp>;
	fMap["clip"] 	= new newElementFunctor<k_clip>;
	fMap["clipPath"] 	= new newElementFunctor<k_clipPath>;
	fMap["colLayout"] 	= new newElementFunctor<k_colLayout>;
	fMap["collation"] 	= new newElementFunctor<k_collation>;
	fMap["colophon"] 	= new newElementFunctor<k_colophon>;
	fMap["color-profile"] 	= new newElementFunctor<k_color_profile>;
	fMap["componentList"] 	= new newElementFunctor<k_componentList>;
	fMap["composer"] 	= new newElementFunctor<k_composer>;
	fMap["condition"] 	= new newElementFunctor<k_condition>;
	fMap["contentItem"] 	= new newElementFunctor<k_contentItem>;
	fMap["contents"] 	= new newElementFunctor<k_contents>;
	fMap["context"] 	= new newElementFunctor<k_context>;
	fMap["contributor"] 	= new newElementFunctor<k_contributor>;
	fMap["corpName"] 	= new newElementFunctor<k_corpName>;
	fMap["corr"] 	= new newElementFunctor<k_corr>;
	fMap["correction"] 	= new newElementFunctor<k_correction>;
	fMap["country"] 	= new newElementFunctor<k_country>;
	fMap["cpMark"] 	= new newElementFunctor<k_cpMark>;
	fMap["creation"] 	= new newElementFunctor<k_creation>;
	fMap["cue"] 	= new newElementFunctor<k_cue>;
	fMap["cursor"] 	= new newElementFunctor<k_cursor>;
	fMap["curve"] 	= new newElementFunctor<k_curve>;
	fMap["custos"] 	= new newElementFunctor<k_custos>;
	fMap["cutout"] 	= new newElementFunctor<k_cutout>;
	fMap["damage"] 	= new newElementFunctor<k_damage>;
	fMap["date"] 	= new newElementFunctor<k_date>;
	fMap["decoDesc"] 	= new newElementFunctor<k_decoDesc>;
	fMap["decoNote"] 	= new newElementFunctor<k_decoNote>;
	fMap["dedicatee"] 	= new newElementFunctor<k_dedicatee>;
	fMap["dedication"] 	= new newElementFunctor<k_dedication>;
	fMap["definition-src"] 	= new newElementFunctor<k_definition_src>;
	fMap["defs"] 	= new newElementFunctor<k_defs>;
	fMap["del"] 	= new newElementFunctor<k_del>;
	fMap["depth"] 	= new newElementFunctor<k_depth>;
	fMap["desc"] 	= new newElementFunctor<k_desc>;
	fMap["dim"] 	= new newElementFunctor<k_dim>;
	fMap["dimensions"] 	= new newElementFunctor<k_dimensions>;
	fMap["dir"] 	= new newElementFunctor<k_dir>;
	fMap["distributor"] 	= new newElementFunctor<k_distributor>;
	fMap["district"] 	= new newElementFunctor<k_district>;
	fMap["div"] 	= new newElementFunctor<k_div>;
	fMap["domainsDecl"] 	= new newElementFunctor<k_domainsDecl>;
	fMap["dot"] 	= new newElementFunctor<k_dot>;
	fMap["dynam"] 	= new newElementFunctor<k_dynam>;
	fMap["edition"] 	= new newElementFunctor<k_edition>;
	fMap["editionStmt"] 	= new newElementFunctor<k_editionStmt>;
	fMap["editor"] 	= new newElementFunctor<k_editor>;
	fMap["editorialDecl"] 	= new newElementFunctor<k_editorialDecl>;
	fMap["ellipse"] 	= new newElementFunctor<k_ellipse>;
	fMap["encodingDesc"] 	= new newElementFunctor<k_encodingDesc>;
	fMap["ending"] 	= new newElementFunctor<k_ending>;
	fMap["epigraph"] 	= new newElementFunctor<k_epigraph>;
	fMap["event"] 	= new newElementFunctor<k_event>;
	fMap["eventList"] 	= new newElementFunctor<k_eventList>;
	fMap["exhibHist"] 	= new newElementFunctor<k_exhibHist>;
	fMap["expan"] 	= new newElementFunctor<k_expan>;
	fMap["expansion"] 	= new newElementFunctor<k_expansion>;
	fMap["explicit"] 	= new newElementFunctor<k_explicit>;
	fMap["expression"] 	= new newElementFunctor<k_expression>;
	fMap["expressionList"] 	= new newElementFunctor<k_expressionList>;
	fMap["extMeta"] 	= new newElementFunctor<k_extMeta>;
	fMap["extent"] 	= new newElementFunctor<k_extent>;
	fMap["f"] 	= new newElementFunctor<k_f>;
	fMap["fTrem"] 	= new newElementFunctor<k_fTrem>;
	fMap["facsimile"] 	= new newElementFunctor<k_facsimile>;
	fMap["famName"] 	= new newElementFunctor<k_famName>;
	fMap["fb"] 	= new newElementFunctor<k_fb>;
	fMap["feBlend"] 	= new newElementFunctor<k_feBlend>;
	fMap["feColorMatrix"] 	= new newElementFunctor<k_feColorMatrix>;
	fMap["feComponentTransfer"] 	= new newElementFunctor<k_feComponentTransfer>;
	fMap["feComposite"] 	= new newElementFunctor<k_feComposite>;
	fMap["feConvolveMatrix"] 	= new newElementFunctor<k_feConvolveMatrix>;
	fMap["feDiffuseLighting"] 	= new newElementFunctor<k_feDiffuseLighting>;
	fMap["feDisplacementMap"] 	= new newElementFunctor<k_feDisplacementMap>;
	fMap["feDistantLight"] 	= new newElementFunctor<k_feDistantLight>;
	fMap["feFlood"] 	= new newElementFunctor<k_feFlood>;
	fMap["feFuncA"] 	= new newElementFunctor<k_feFuncA>;
	fMap["feFuncB"] 	= new newElementFunctor<k_feFuncB>;
	fMap["feFuncG"] 	= new newElementFunctor<k_feFuncG>;
	fMap["feFuncR"] 	= new newElementFunctor<k_feFuncR>;
	fMap["feGaussianBlur"] 	= new newElementFunctor<k_feGaussianBlur>;
	fMap["feImage"] 	= new newElementFunctor<k_feImage>;
	fMap["feMerge"] 	= new newElementFunctor<k_feMerge>;
	fMap["feMergeNode"] 	= new newElementFunctor<k_feMergeNode>;
	fMap["feMorphology"] 	= new newElementFunctor<k_feMorphology>;
	fMap["feOffset"] 	= new newElementFunctor<k_feOffset>;
	fMap["fePointLight"] 	= new newElementFunctor<k_fePointLight>;
	fMap["feSpecularLighting"] 	= new newElementFunctor<k_feSpecularLighting>;
	fMap["feSpotLight"] 	= new newElementFunctor<k_feSpotLight>;
	fMap["feTile"] 	= new newElementFunctor<k_feTile>;
	fMap["feTurbulence"] 	= new newElementFunctor<k_feTurbulence>;
	fMap["fermata"] 	= new newElementFunctor<k_fermata>;
	fMap["fig"] 	= new newElementFunctor<k_fig>;
	fMap["figDesc"] 	= new newElementFunctor<k_figDesc>;
	fMap["fileChar"] 	= new newElementFunctor<k_fileChar>;
	fMap["fileDesc"] 	= new newElementFunctor<k_fileDesc>;
	fMap["filter"] 	= new newElementFunctor<k_filter>;
	fMap["fing"] 	= new newElementFunctor<k_fing>;
	fMap["fingGrp"] 	= new newElementFunctor<k_fingGrp>;
	fMap["fingerprint"] 	= new newElementFunctor<k_fingerprint>;
	fMap["foliaDesc"] 	= new newElementFunctor<k_foliaDesc>;
	fMap["foliation"] 	= new newElementFunctor<k_foliation>;
	fMap["folium"] 	= new newElementFunctor<k_folium>;
	fMap["font"] 	= new newElementFunctor<k_font>;
	fMap["font-face"] 	= new newElementFunctor<k_font_face>;
	fMap["font-face-format"] 	= new newElementFunctor<k_font_face_format>;
	fMap["font-face-name"] 	= new newElementFunctor<k_font_face_name>;
	fMap["font-face-src"] 	= new newElementFunctor<k_font_face_src>;
	fMap["font-face-uri"] 	= new newElementFunctor<k_font_face_uri>;
	fMap["foreName"] 	= new newElementFunctor<k_foreName>;
	fMap["foreignObject"] 	= new newElementFunctor<k_foreignObject>;
	fMap["front"] 	= new newElementFunctor<k_front>;
	fMap["funder"] 	= new newElementFunctor<k_funder>;
	fMap["g"] 	= new newElementFunctor<k_g>;
	fMap["gap"] 	= new newElementFunctor<k_gap>;
	fMap["genDesc"] 	= new newElementFunctor<k_genDesc>;
	fMap["genName"] 	= new newElementFunctor<k_genName>;
	fMap["genState"] 	= new newElementFunctor<k_genState>;
	fMap["genre"] 	= new newElementFunctor<k_genre>;
	fMap["geogFeat"] 	= new newElementFunctor<k_geogFeat>;
	fMap["geogName"] 	= new newElementFunctor<k_geogName>;
	fMap["gliss"] 	= new newElementFunctor<k_gliss>;
	fMap["glyph"] 	= new newElementFunctor<k_glyph>;
	fMap["glyphRef"] 	= new newElementFunctor<k_glyphRef>;
	fMap["graceGrp"] 	= new newElementFunctor<k_graceGrp>;
	fMap["graphic"] 	= new newElementFunctor<k_graphic>;
	fMap["group"] 	= new newElementFunctor<k_group>;
	fMap["grpSym"] 	= new newElementFunctor<k_grpSym>;
	fMap["hairpin"] 	= new newElementFunctor<k_hairpin>;
	fMap["halfmRpt"] 	= new newElementFunctor<k_halfmRpt>;
	fMap["hand"] 	= new newElementFunctor<k_hand>;
	fMap["handList"] 	= new newElementFunctor<k_handList>;
	fMap["handShift"] 	= new newElementFunctor<k_handShift>;
	fMap["harm"] 	= new newElementFunctor<k_harm>;
	fMap["harpPedal"] 	= new newElementFunctor<k_harpPedal>;
	fMap["head"] 	= new newElementFunctor<k_head>;
	fMap["height"] 	= new newElementFunctor<k_height>;
	fMap["heraldry"] 	= new newElementFunctor<k_heraldry>;
	fMap["hex"] 	= new newElementFunctor<k_hex>;
	fMap["history"] 	= new newElementFunctor<k_history>;
	fMap["hkern"] 	= new newElementFunctor<k_hkern>;
	fMap["identifier"] 	= new newElementFunctor<k_identifier>;
	fMap["image"] 	= new newElementFunctor<k_image>;
	fMap["imprimatur"] 	= new newElementFunctor<k_imprimatur>;
	fMap["imprint"] 	= new newElementFunctor<k_imprint>;
	fMap["incip"] 	= new newElementFunctor<k_incip>;
	fMap["incipCode"] 	= new newElementFunctor<k_incipCode>;
	fMap["incipText"] 	= new newElementFunctor<k_incipText>;
	fMap["inscription"] 	= new newElementFunctor<k_inscription>;
	fMap["instrDef"] 	= new newElementFunctor<k_instrDef>;
	fMap["instrGrp"] 	= new newElementFunctor<k_instrGrp>;
	fMap["interpretation"] 	= new newElementFunctor<k_interpretation>;
	fMap["item"] 	= new newElementFunctor<k_item>;
	fMap["itemList"] 	= new newElementFunctor<k_itemList>;
	fMap["key"] 	= new newElementFunctor<k_key>;
	fMap["keyAccid"] 	= new newElementFunctor<k_keyAccid>;
	fMap["keySig"] 	= new newElementFunctor<k_keySig>;
	fMap["l"] 	= new newElementFunctor<k_l>;
	fMap["label"] 	= new newElementFunctor<k_label>;
	fMap["labelAbbr"] 	= new newElementFunctor<k_labelAbbr>;
	fMap["langUsage"] 	= new newElementFunctor<k_langUsage>;
	fMap["language"] 	= new newElementFunctor<k_language>;
	fMap["layer"] 	= new newElementFunctor<k_layer>;
	fMap["layerDef"] 	= new newElementFunctor<k_layerDef>;
	fMap["layout"] 	= new newElementFunctor<k_layout>;
	fMap["layoutDesc"] 	= new newElementFunctor<k_layoutDesc>;
	fMap["lb"] 	= new newElementFunctor<k_lb>;
	fMap["lem"] 	= new newElementFunctor<k_lem>;
	fMap["lg"] 	= new newElementFunctor<k_lg>;
	fMap["li"] 	= new newElementFunctor<k_li>;
	fMap["librettist"] 	= new newElementFunctor<k_librettist>;
	fMap["line"] 	= new newElementFunctor<k_line>;
	fMap["linearGradient"] 	= new newElementFunctor<k_linearGradient>;
	fMap["list"] 	= new newElementFunctor<k_list>;
	fMap["locus"] 	= new newElementFunctor<k_locus>;
	fMap["locusGrp"] 	= new newElementFunctor<k_locusGrp>;
	fMap["lv"] 	= new newElementFunctor<k_lv>;
	fMap["lyricist"] 	= new newElementFunctor<k_lyricist>;
	fMap["mNum"] 	= new newElementFunctor<k_mNum>;
	fMap["mRest"] 	= new newElementFunctor<k_mRest>;
	fMap["mRpt"] 	= new newElementFunctor<k_mRpt>;
	fMap["mRpt2"] 	= new newElementFunctor<k_mRpt2>;
	fMap["mSpace"] 	= new newElementFunctor<k_mSpace>;
	fMap["manifestation"] 	= new newElementFunctor<k_manifestation>;
	fMap["manifestationList"] 	= new newElementFunctor<k_manifestationList>;
	fMap["mapping"] 	= new newElementFunctor<k_mapping>;
	fMap["marker"] 	= new newElementFunctor<k_marker>;
	fMap["mask"] 	= new newElementFunctor<k_mask>;
	fMap["mdiv"] 	= new newElementFunctor<k_mdiv>;
	fMap["measure"] 	= new newElementFunctor<k_measure>;
	fMap["mei"] 	= new newElementFunctor<k_mei>;
	fMap["meiCorpus"] 	= new newElementFunctor<k_meiCorpus>;
	fMap["meiHead"] 	= new newElementFunctor<k_meiHead>;
	fMap["mensuration"] 	= new newElementFunctor<k_mensuration>;
	fMap["metaMark"] 	= new newElementFunctor<k_metaMark>;
	fMap["metaText"] 	= new newElementFunctor<k_metaText>;
	fMap["metadata"] 	= new newElementFunctor<k_metadata>;
	fMap["meter"] 	= new newElementFunctor<k_meter>;
	fMap["meterSig"] 	= new newElementFunctor<k_meterSig>;
	fMap["meterSigGrp"] 	= new newElementFunctor<k_meterSigGrp>;
	fMap["midi"] 	= new newElementFunctor<k_midi>;
	fMap["missing-glyph"] 	= new newElementFunctor<k_missing_glyph>;
	fMap["monogr"] 	= new newElementFunctor<k_monogr>;
	fMap["mordent"] 	= new newElementFunctor<k_mordent>;
	fMap["mpath"] 	= new newElementFunctor<k_mpath>;
	fMap["multiRest"] 	= new newElementFunctor<k_multiRest>;
	fMap["multiRpt"] 	= new newElementFunctor<k_multiRpt>;
	fMap["music"] 	= new newElementFunctor<k_music>;
	fMap["name"] 	= new newElementFunctor<k_name>;
	fMap["nameLink"] 	= new newElementFunctor<k_nameLink>;
	fMap["namespace"] 	= new newElementFunctor<k_namespace>;
	fMap["normalization"] 	= new newElementFunctor<k_normalization>;
	fMap["note"] 	= new newElementFunctor<k_note>;
	fMap["noteOff"] 	= new newElementFunctor<k_noteOff>;
	fMap["noteOn"] 	= new newElementFunctor<k_noteOn>;
	fMap["notesStmt"] 	= new newElementFunctor<k_notesStmt>;
	fMap["num"] 	= new newElementFunctor<k_num>;
	fMap["oLayer"] 	= new newElementFunctor<k_oLayer>;
	fMap["oStaff"] 	= new newElementFunctor<k_oStaff>;
	fMap["octave"] 	= new newElementFunctor<k_octave>;
	fMap["orig"] 	= new newElementFunctor<k_orig>;
	fMap["ornam"] 	= new newElementFunctor<k_ornam>;
	fMap["ossia"] 	= new newElementFunctor<k_ossia>;
	fMap["otherChar"] 	= new newElementFunctor<k_otherChar>;
	fMap["p"] 	= new newElementFunctor<k_p>;
	fMap["pad"] 	= new newElementFunctor<k_pad>;
	fMap["part"] 	= new newElementFunctor<k_part>;
	fMap["parts"] 	= new newElementFunctor<k_parts>;
	fMap["patch"] 	= new newElementFunctor<k_patch>;
	fMap["path"] 	= new newElementFunctor<k_path>;
	fMap["pattern"] 	= new newElementFunctor<k_pattern>;
	fMap["pb"] 	= new newElementFunctor<k_pb>;
	fMap["pedal"] 	= new newElementFunctor<k_pedal>;
	fMap["perfDuration"] 	= new newElementFunctor<k_perfDuration>;
	fMap["perfMedium"] 	= new newElementFunctor<k_perfMedium>;
	fMap["perfRes"] 	= new newElementFunctor<k_perfRes>;
	fMap["perfResList"] 	= new newElementFunctor<k_perfResList>;
	fMap["performance"] 	= new newElementFunctor<k_performance>;
	fMap["periodName"] 	= new newElementFunctor<k_periodName>;
	fMap["persName"] 	= new newElementFunctor<k_persName>;
	fMap["pgDesc"] 	= new newElementFunctor<k_pgDesc>;
	fMap["pgFoot"] 	= new newElementFunctor<k_pgFoot>;
	fMap["pgFoot2"] 	= new newElementFunctor<k_pgFoot2>;
	fMap["pgHead"] 	= new newElementFunctor<k_pgHead>;
	fMap["pgHead2"] 	= new newElementFunctor<k_pgHead2>;
	fMap["phrase"] 	= new newElementFunctor<k_phrase>;
	fMap["physDesc"] 	= new newElementFunctor<k_physDesc>;
	fMap["physLoc"] 	= new newElementFunctor<k_physLoc>;
	fMap["physMedium"] 	= new newElementFunctor<k_physMedium>;
	fMap["plateNum"] 	= new newElementFunctor<k_plateNum>;
	fMap["playingSpeed"] 	= new newElementFunctor<k_playingSpeed>;
	fMap["polygon"] 	= new newElementFunctor<k_polygon>;
	fMap["polyline"] 	= new newElementFunctor<k_polyline>;
	fMap["port"] 	= new newElementFunctor<k_port>;
	fMap["postBox"] 	= new newElementFunctor<k_postBox>;
	fMap["postCode"] 	= new newElementFunctor<k_postCode>;
	fMap["price"] 	= new newElementFunctor<k_price>;
	fMap["prog"] 	= new newElementFunctor<k_prog>;
	fMap["projectDesc"] 	= new newElementFunctor<k_projectDesc>;
	fMap["propName"] 	= new newElementFunctor<k_propName>;
	fMap["propValue"] 	= new newElementFunctor<k_propValue>;
	fMap["provenance"] 	= new newElementFunctor<k_provenance>;
	fMap["ptr"] 	= new newElementFunctor<k_ptr>;
	fMap["pubPlace"] 	= new newElementFunctor<k_pubPlace>;
	fMap["pubStmt"] 	= new newElementFunctor<k_pubStmt>;
	fMap["publisher"] 	= new newElementFunctor<k_publisher>;
	fMap["q"] 	= new newElementFunctor<k_q>;
	fMap["quote"] 	= new newElementFunctor<k_quote>;
	fMap["radialGradient"] 	= new newElementFunctor<k_radialGradient>;
	fMap["rdg"] 	= new newElementFunctor<k_rdg>;
	fMap["recipient"] 	= new newElementFunctor<k_recipient>;
	fMap["recording"] 	= new newElementFunctor<k_recording>;
	fMap["rect"] 	= new newElementFunctor<k_rect>;
	fMap["ref"] 	= new newElementFunctor<k_ref>;
	fMap["refrain"] 	= new newElementFunctor<k_refrain>;
	fMap["reg"] 	= new newElementFunctor<k_reg>;
	fMap["region"] 	= new newElementFunctor<k_region>;
	fMap["reh"] 	= new newElementFunctor<k_reh>;
	fMap["relatedItem"] 	= new newElementFunctor<k_relatedItem>;
	fMap["relation"] 	= new newElementFunctor<k_relation>;
	fMap["relationList"] 	= new newElementFunctor<k_relationList>;
	fMap["rend"] 	= new newElementFunctor<k_rend>;
	fMap["repository"] 	= new newElementFunctor<k_repository>;
	fMap["resp"] 	= new newElementFunctor<k_resp>;
	fMap["respStmt"] 	= new newElementFunctor<k_respStmt>;
	fMap["rest"] 	= new newElementFunctor<k_rest>;
	fMap["restore"] 	= new newElementFunctor<k_restore>;
	fMap["revisionDesc"] 	= new newElementFunctor<k_revisionDesc>;
	fMap["role"] 	= new newElementFunctor<k_role>;
	fMap["roleDesc"] 	= new newElementFunctor<k_roleDesc>;
	fMap["roleName"] 	= new newElementFunctor<k_roleName>;
	fMap["rubric"] 	= new newElementFunctor<k_rubric>;
	fMap["samplingDecl"] 	= new newElementFunctor<k_samplingDecl>;
	fMap["sb"] 	= new newElementFunctor<k_sb>;
	fMap["score"] 	= new newElementFunctor<k_score>;
	fMap["scoreDef"] 	= new newElementFunctor<k_scoreDef>;
	fMap["scoreFormat"] 	= new newElementFunctor<k_scoreFormat>;
	fMap["script"] 	= new newElementFunctor<k_script>;
	fMap["scriptDesc"] 	= new newElementFunctor<k_scriptDesc>;
	fMap["scriptNote"] 	= new newElementFunctor<k_scriptNote>;
	fMap["seal"] 	= new newElementFunctor<k_seal>;
	fMap["sealDesc"] 	= new newElementFunctor<k_sealDesc>;
	fMap["secFolio"] 	= new newElementFunctor<k_secFolio>;
	fMap["section"] 	= new newElementFunctor<k_section>;
	fMap["seg"] 	= new newElementFunctor<k_seg>;
	fMap["segmentation"] 	= new newElementFunctor<k_segmentation>;
	fMap["seqNum"] 	= new newElementFunctor<k_seqNum>;
	fMap["series"] 	= new newElementFunctor<k_series>;
	fMap["seriesStmt"] 	= new newElementFunctor<k_seriesStmt>;
	fMap["set"] 	= new newElementFunctor<k_set>;
	fMap["settlement"] 	= new newElementFunctor<k_settlement>;
	fMap["sic"] 	= new newElementFunctor<k_sic>;
	fMap["signatures"] 	= new newElementFunctor<k_signatures>;
	fMap["slur"] 	= new newElementFunctor<k_slur>;
	fMap["soundChan"] 	= new newElementFunctor<k_soundChan>;
	fMap["source"] 	= new newElementFunctor<k_source>;
	fMap["sourceDesc"] 	= new newElementFunctor<k_sourceDesc>;
	fMap["sp"] 	= new newElementFunctor<k_sp>;
	fMap["space"] 	= new newElementFunctor<k_space>;
	fMap["speaker"] 	= new newElementFunctor<k_speaker>;
	fMap["specRepro"] 	= new newElementFunctor<k_specRepro>;
	fMap["sponsor"] 	= new newElementFunctor<k_sponsor>;
	fMap["stack"] 	= new newElementFunctor<k_stack>;
	fMap["staff"] 	= new newElementFunctor<k_staff>;
	fMap["staffDef"] 	= new newElementFunctor<k_staffDef>;
	fMap["staffGrp"] 	= new newElementFunctor<k_staffGrp>;
	fMap["stageDir"] 	= new newElementFunctor<k_stageDir>;
	fMap["stamp"] 	= new newElementFunctor<k_stamp>;
	fMap["stdVals"] 	= new newElementFunctor<k_stdVals>;
	fMap["stop"] 	= new newElementFunctor<k_stop>;
	fMap["street"] 	= new newElementFunctor<k_street>;
	fMap["style"] 	= new newElementFunctor<k_style>;
	fMap["styleName"] 	= new newElementFunctor<k_styleName>;
	fMap["subst"] 	= new newElementFunctor<k_subst>;
	fMap["supplied"] 	= new newElementFunctor<k_supplied>;
	fMap["support"] 	= new newElementFunctor<k_support>;
	fMap["supportDesc"] 	= new newElementFunctor<k_supportDesc>;
	fMap["surface"] 	= new newElementFunctor<k_surface>;
	fMap["svg"] 	= new newElementFunctor<k_svg>;
	fMap["switch"] 	= new newElementFunctor<k_switch>;
	fMap["syl"] 	= new newElementFunctor<k_syl>;
	fMap["symName"] 	= new newElementFunctor<k_symName>;
	fMap["symProp"] 	= new newElementFunctor<k_symProp>;
	fMap["symbol"] 	= new newElementFunctor<k_symbol>;
	fMap["symbolDef"] 	= new newElementFunctor<k_symbolDef>;
	fMap["symbolTable"] 	= new newElementFunctor<k_symbolTable>;
	fMap["sysReq"] 	= new newElementFunctor<k_sysReq>;
	fMap["table"] 	= new newElementFunctor<k_table>;
	fMap["tagUsage"] 	= new newElementFunctor<k_tagUsage>;
	fMap["tagsDecl"] 	= new newElementFunctor<k_tagsDecl>;
	fMap["taxonomy"] 	= new newElementFunctor<k_taxonomy>;
	fMap["td"] 	= new newElementFunctor<k_td>;
	fMap["tempo"] 	= new newElementFunctor<k_tempo>;
	fMap["term"] 	= new newElementFunctor<k_term>;
	fMap["termList"] 	= new newElementFunctor<k_termList>;
	fMap["text"] 	= new newElementFunctor<k_text>;
	fMap["textLang"] 	= new newElementFunctor<k_textLang>;
	fMap["textPath"] 	= new newElementFunctor<k_textPath>;
	fMap["th"] 	= new newElementFunctor<k_th>;
	fMap["tie"] 	= new newElementFunctor<k_tie>;
	fMap["title"] 	= new newElementFunctor<k_title>;
	fMap["titlePage"] 	= new newElementFunctor<k_titlePage>;
	fMap["titlePart"] 	= new newElementFunctor<k_titlePart>;
	fMap["titleStmt"] 	= new newElementFunctor<k_titleStmt>;
	fMap["tr"] 	= new newElementFunctor<k_tr>;
	fMap["trackConfig"] 	= new newElementFunctor<k_trackConfig>;
	fMap["treatHist"] 	= new newElementFunctor<k_treatHist>;
	fMap["treatSched"] 	= new newElementFunctor<k_treatSched>;
	fMap["tref"] 	= new newElementFunctor<k_tref>;
	fMap["trill"] 	= new newElementFunctor<k_trill>;
	fMap["trkName"] 	= new newElementFunctor<k_trkName>;
	fMap["tspan"] 	= new newElementFunctor<k_tspan>;
	fMap["tuplet"] 	= new newElementFunctor<k_tuplet>;
	fMap["tupletSpan"] 	= new newElementFunctor<k_tupletSpan>;
	fMap["turn"] 	= new newElementFunctor<k_turn>;
	fMap["typeDesc"] 	= new newElementFunctor<k_typeDesc>;
	fMap["typeNote"] 	= new newElementFunctor<k_typeNote>;
	fMap["unclear"] 	= new newElementFunctor<k_unclear>;
	fMap["unpub"] 	= new newElementFunctor<k_unpub>;
	fMap["use"] 	= new newElementFunctor<k_use>;
	fMap["useRestrict"] 	= new newElementFunctor<k_useRestrict>;
	fMap["vel"] 	= new newElementFunctor<k_vel>;
	fMap["verse"] 	= new newElementFunctor<k_verse>;
	fMap["view"] 	= new newElementFunctor<k_view>;
	fMap["vkern"] 	= new newElementFunctor<k_vkern>;
	fMap["volta"] 	= new newElementFunctor<k_volta>;
	fMap["watermark"] 	= new newElementFunctor<k_watermark>;
	fMap["when"] 	= new newElementFunctor<k_when>;
	fMap["width"] 	= new newElementFunctor<k_width>;
	fMap["work"] 	= new newElementFunctor<k_work>;
	fMap["workList"] 	= new newElementFunctor<k_workList>;
	fMap["zone"] 	= new newElementFunctor<k_zone>;

	fType2Name[k_a] 	= "a";
	fType2Name[k_abbr] 	= "abbr";
	fType2Name[k_accMat] 	= "accMat";
	fType2Name[k_accessRestrict] 	= "accessRestrict";
	fType2Name[k_accid] 	= "accid";
	fType2Name[k_acquisition] 	= "acquisition";
	fType2Name[k_actor] 	= "actor";
	fType2Name[k_add] 	= "add";
	fType2Name[k_addDesc] 	= "addDesc";
	fType2Name[k_addName] 	= "addName";
	fType2Name[k_addrLine] 	= "addrLine";
	fType2Name[k_address] 	= "address";
	fType2Name[k_altGlyph] 	= "altGlyph";
	fType2Name[k_altGlyphDef] 	= "altGlyphDef";
	fType2Name[k_altGlyphItem] 	= "altGlyphItem";
	fType2Name[k_altId] 	= "altId";
	fType2Name[k_ambNote] 	= "ambNote";
	fType2Name[k_ambitus] 	= "ambitus";
	fType2Name[k_analytic] 	= "analytic";
	fType2Name[k_anchoredText] 	= "anchoredText";
	fType2Name[k_animate] 	= "animate";
	fType2Name[k_animateColor] 	= "animateColor";
	fType2Name[k_animateMotion] 	= "animateMotion";
	fType2Name[k_animateTransform] 	= "animateTransform";
	fType2Name[k_annot] 	= "annot";
	fType2Name[k_app] 	= "app";
	fType2Name[k_appInfo] 	= "appInfo";
	fType2Name[k_application] 	= "application";
	fType2Name[k_argument] 	= "argument";
	fType2Name[k_arpeg] 	= "arpeg";
	fType2Name[k_arranger] 	= "arranger";
	fType2Name[k_artic] 	= "artic";
	fType2Name[k_attUsage] 	= "attUsage";
	fType2Name[k_attacca] 	= "attacca";
	fType2Name[k_audience] 	= "audience";
	fType2Name[k_author] 	= "author";
	fType2Name[k_avFile] 	= "avFile";
	fType2Name[k_availability] 	= "availability";
	fType2Name[k_bTrem] 	= "bTrem";
	fType2Name[k_back] 	= "back";
	fType2Name[k_barLine] 	= "barLine";
	fType2Name[k_barre] 	= "barre";
	fType2Name[k_beam] 	= "beam";
	fType2Name[k_beamSpan] 	= "beamSpan";
	fType2Name[k_beatRpt] 	= "beatRpt";
	fType2Name[k_bend] 	= "bend";
	fType2Name[k_bibl] 	= "bibl";
	fType2Name[k_biblList] 	= "biblList";
	fType2Name[k_biblScope] 	= "biblScope";
	fType2Name[k_biblStruct] 	= "biblStruct";
	fType2Name[k_bifolium] 	= "bifolium";
	fType2Name[k_binding] 	= "binding";
	fType2Name[k_bindingDesc] 	= "bindingDesc";
	fType2Name[k_bloc] 	= "bloc";
	fType2Name[k_body] 	= "body";
	fType2Name[k_bracketSpan] 	= "bracketSpan";
	fType2Name[k_breath] 	= "breath";
	fType2Name[k_byline] 	= "byline";
	fType2Name[k_caesura] 	= "caesura";
	fType2Name[k_caption] 	= "caption";
	fType2Name[k_captureMode] 	= "captureMode";
	fType2Name[k_carrierForm] 	= "carrierForm";
	fType2Name[k_castGrp] 	= "castGrp";
	fType2Name[k_castItem] 	= "castItem";
	fType2Name[k_castList] 	= "castList";
	fType2Name[k_catRel] 	= "catRel";
	fType2Name[k_catchwords] 	= "catchwords";
	fType2Name[k_category] 	= "category";
	fType2Name[k_cb] 	= "cb";
	fType2Name[k_cc] 	= "cc";
	fType2Name[k_chan] 	= "chan";
	fType2Name[k_chanPr] 	= "chanPr";
	fType2Name[k_change] 	= "change";
	fType2Name[k_changeDesc] 	= "changeDesc";
	fType2Name[k_choice] 	= "choice";
	fType2Name[k_chord] 	= "chord";
	fType2Name[k_chordDef] 	= "chordDef";
	fType2Name[k_chordMember] 	= "chordMember";
	fType2Name[k_chordTable] 	= "chordTable";
	fType2Name[k_circle] 	= "circle";
	fType2Name[k_classDecls] 	= "classDecls";
	fType2Name[k_classification] 	= "classification";
	fType2Name[k_clef] 	= "clef";
	fType2Name[k_clefGrp] 	= "clefGrp";
	fType2Name[k_clip] 	= "clip";
	fType2Name[k_clipPath] 	= "clipPath";
	fType2Name[k_colLayout] 	= "colLayout";
	fType2Name[k_collation] 	= "collation";
	fType2Name[k_colophon] 	= "colophon";
	fType2Name[k_color_profile] 	= "color-profile";
	fType2Name[k_componentList] 	= "componentList";
	fType2Name[k_composer] 	= "composer";
	fType2Name[k_condition] 	= "condition";
	fType2Name[k_contentItem] 	= "contentItem";
	fType2Name[k_contents] 	= "contents";
	fType2Name[k_context] 	= "context";
	fType2Name[k_contributor] 	= "contributor";
	fType2Name[k_corpName] 	= "corpName";
	fType2Name[k_corr] 	= "corr";
	fType2Name[k_correction] 	= "correction";
	fType2Name[k_country] 	= "country";
	fType2Name[k_cpMark] 	= "cpMark";
	fType2Name[k_creation] 	= "creation";
	fType2Name[k_cue] 	= "cue";
	fType2Name[k_cursor] 	= "cursor";
	fType2Name[k_curve] 	= "curve";
	fType2Name[k_custos] 	= "custos";
	fType2Name[k_cutout] 	= "cutout";
	fType2Name[k_damage] 	= "damage";
	fType2Name[k_date] 	= "date";
	fType2Name[k_decoDesc] 	= "decoDesc";
	fType2Name[k_decoNote] 	= "decoNote";
	fType2Name[k_dedicatee] 	= "dedicatee";
	fType2Name[k_dedication] 	= "dedication";
	fType2Name[k_definition_src] 	= "definition-src";
	fType2Name[k_defs] 	= "defs";
	fType2Name[k_del] 	= "del";
	fType2Name[k_depth] 	= "depth";
	fType2Name[k_desc] 	= "desc";
	fType2Name[k_dim] 	= "dim";
	fType2Name[k_dimensions] 	= "dimensions";
	fType2Name[k_dir] 	= "dir";
	fType2Name[k_distributor] 	= "distributor";
	fType2Name[k_district] 	= "district";
	fType2Name[k_div] 	= "div";
	fType2Name[k_domainsDecl] 	= "domainsDecl";
	fType2Name[k_dot] 	= "dot";
	fType2Name[k_dynam] 	= "dynam";
	fType2Name[k_edition] 	= "edition";
	fType2Name[k_editionStmt] 	= "editionStmt";
	fType2Name[k_editor] 	= "editor";
	fType2Name[k_editorialDecl] 	= "editorialDecl";
	fType2Name[k_ellipse] 	= "ellipse";
	fType2Name[k_encodingDesc] 	= "encodingDesc";
	fType2Name[k_ending] 	= "ending";
	fType2Name[k_epigraph] 	= "epigraph";
	fType2Name[k_event] 	= "event";
	fType2Name[k_eventList] 	= "eventList";
	fType2Name[k_exhibHist] 	= "exhibHist";
	fType2Name[k_expan] 	= "expan";
	fType2Name[k_expansion] 	= "expansion";
	fType2Name[k_explicit] 	= "explicit";
	fType2Name[k_expression] 	= "expression";
	fType2Name[k_expressionList] 	= "expressionList";
	fType2Name[k_extMeta] 	= "extMeta";
	fType2Name[k_extent] 	= "extent";
	fType2Name[k_f] 	= "f";
	fType2Name[k_fTrem] 	= "fTrem";
	fType2Name[k_facsimile] 	= "facsimile";
	fType2Name[k_famName] 	= "famName";
	fType2Name[k_fb] 	= "fb";
	fType2Name[k_feBlend] 	= "feBlend";
	fType2Name[k_feColorMatrix] 	= "feColorMatrix";
	fType2Name[k_feComponentTransfer] 	= "feComponentTransfer";
	fType2Name[k_feComposite] 	= "feComposite";
	fType2Name[k_feConvolveMatrix] 	= "feConvolveMatrix";
	fType2Name[k_feDiffuseLighting] 	= "feDiffuseLighting";
	fType2Name[k_feDisplacementMap] 	= "feDisplacementMap";
	fType2Name[k_feDistantLight] 	= "feDistantLight";
	fType2Name[k_feFlood] 	= "feFlood";
	fType2Name[k_feFuncA] 	= "feFuncA";
	fType2Name[k_feFuncB] 	= "feFuncB";
	fType2Name[k_feFuncG] 	= "feFuncG";
	fType2Name[k_feFuncR] 	= "feFuncR";
	fType2Name[k_feGaussianBlur] 	= "feGaussianBlur";
	fType2Name[k_feImage] 	= "feImage";
	fType2Name[k_feMerge] 	= "feMerge";
	fType2Name[k_feMergeNode] 	= "feMergeNode";
	fType2Name[k_feMorphology] 	= "feMorphology";
	fType2Name[k_feOffset] 	= "feOffset";
	fType2Name[k_fePointLight] 	= "fePointLight";
	fType2Name[k_feSpecularLighting] 	= "feSpecularLighting";
	fType2Name[k_feSpotLight] 	= "feSpotLight";
	fType2Name[k_feTile] 	= "feTile";
	fType2Name[k_feTurbulence] 	= "feTurbulence";
	fType2Name[k_fermata] 	= "fermata";
	fType2Name[k_fig] 	= "fig";
	fType2Name[k_figDesc] 	= "figDesc";
	fType2Name[k_fileChar] 	= "fileChar";
	fType2Name[k_fileDesc] 	= "fileDesc";
	fType2Name[k_filter] 	= "filter";
	fType2Name[k_fing] 	= "fing";
	fType2Name[k_fingGrp] 	= "fingGrp";
	fType2Name[k_fingerprint] 	= "fingerprint";
	fType2Name[k_foliaDesc] 	= "foliaDesc";
	fType2Name[k_foliation] 	= "foliation";
	fType2Name[k_folium] 	= "folium";
	fType2Name[k_font] 	= "font";
	fType2Name[k_font_face] 	= "font-face";
	fType2Name[k_font_face_format] 	= "font-face-format";
	fType2Name[k_font_face_name] 	= "font-face-name";
	fType2Name[k_font_face_src] 	= "font-face-src";
	fType2Name[k_font_face_uri] 	= "font-face-uri";
	fType2Name[k_foreName] 	= "foreName";
	fType2Name[k_foreignObject] 	= "foreignObject";
	fType2Name[k_front] 	= "front";
	fType2Name[k_funder] 	= "funder";
	fType2Name[k_g] 	= "g";
	fType2Name[k_gap] 	= "gap";
	fType2Name[k_genDesc] 	= "genDesc";
	fType2Name[k_genName] 	= "genName";
	fType2Name[k_genState] 	= "genState";
	fType2Name[k_genre] 	= "genre";
	fType2Name[k_geogFeat] 	= "geogFeat";
	fType2Name[k_geogName] 	= "geogName";
	fType2Name[k_gliss] 	= "gliss";
	fType2Name[k_glyph] 	= "glyph";
	fType2Name[k_glyphRef] 	= "glyphRef";
	fType2Name[k_graceGrp] 	= "graceGrp";
	fType2Name[k_graphic] 	= "graphic";
	fType2Name[k_group] 	= "group";
	fType2Name[k_grpSym] 	= "grpSym";
	fType2Name[k_hairpin] 	= "hairpin";
	fType2Name[k_halfmRpt] 	= "halfmRpt";
	fType2Name[k_hand] 	= "hand";
	fType2Name[k_handList] 	= "handList";
	fType2Name[k_handShift] 	= "handShift";
	fType2Name[k_harm] 	= "harm";
	fType2Name[k_harpPedal] 	= "harpPedal";
	fType2Name[k_head] 	= "head";
	fType2Name[k_height] 	= "height";
	fType2Name[k_heraldry] 	= "heraldry";
	fType2Name[k_hex] 	= "hex";
	fType2Name[k_history] 	= "history";
	fType2Name[k_hkern] 	= "hkern";
	fType2Name[k_identifier] 	= "identifier";
	fType2Name[k_image] 	= "image";
	fType2Name[k_imprimatur] 	= "imprimatur";
	fType2Name[k_imprint] 	= "imprint";
	fType2Name[k_incip] 	= "incip";
	fType2Name[k_incipCode] 	= "incipCode";
	fType2Name[k_incipText] 	= "incipText";
	fType2Name[k_inscription] 	= "inscription";
	fType2Name[k_instrDef] 	= "instrDef";
	fType2Name[k_instrGrp] 	= "instrGrp";
	fType2Name[k_interpretation] 	= "interpretation";
	fType2Name[k_item] 	= "item";
	fType2Name[k_itemList] 	= "itemList";
	fType2Name[k_key] 	= "key";
	fType2Name[k_keyAccid] 	= "keyAccid";
	fType2Name[k_keySig] 	= "keySig";
	fType2Name[k_l] 	= "l";
	fType2Name[k_label] 	= "label";
	fType2Name[k_labelAbbr] 	= "labelAbbr";
	fType2Name[k_langUsage] 	= "langUsage";
	fType2Name[k_language] 	= "language";
	fType2Name[k_layer] 	= "layer";
	fType2Name[k_layerDef] 	= "layerDef";
	fType2Name[k_layout] 	= "layout";
	fType2Name[k_layoutDesc] 	= "layoutDesc";
	fType2Name[k_lb] 	= "lb";
	fType2Name[k_lem] 	= "lem";
	fType2Name[k_lg] 	= "lg";
	fType2Name[k_li] 	= "li";
	fType2Name[k_librettist] 	= "librettist";
	fType2Name[k_line] 	= "line";
	fType2Name[k_linearGradient] 	= "linearGradient";
	fType2Name[k_list] 	= "list";
	fType2Name[k_locus] 	= "locus";
	fType2Name[k_locusGrp] 	= "locusGrp";
	fType2Name[k_lv] 	= "lv";
	fType2Name[k_lyricist] 	= "lyricist";
	fType2Name[k_mNum] 	= "mNum";
	fType2Name[k_mRest] 	= "mRest";
	fType2Name[k_mRpt] 	= "mRpt";
	fType2Name[k_mRpt2] 	= "mRpt2";
	fType2Name[k_mSpace] 	= "mSpace";
	fType2Name[k_manifestation] 	= "manifestation";
	fType2Name[k_manifestationList] 	= "manifestationList";
	fType2Name[k_mapping] 	= "mapping";
	fType2Name[k_marker] 	= "marker";
	fType2Name[k_mask] 	= "mask";
	fType2Name[k_mdiv] 	= "mdiv";
	fType2Name[k_measure] 	= "measure";
	fType2Name[k_mei] 	= "mei";
	fType2Name[k_meiCorpus] 	= "meiCorpus";
	fType2Name[k_meiHead] 	= "meiHead";
	fType2Name[k_mensuration] 	= "mensuration";
	fType2Name[k_metaMark] 	= "metaMark";
	fType2Name[k_metaText] 	= "metaText";
	fType2Name[k_metadata] 	= "metadata";
	fType2Name[k_meter] 	= "meter";
	fType2Name[k_meterSig] 	= "meterSig";
	fType2Name[k_meterSigGrp] 	= "meterSigGrp";
	fType2Name[k_midi] 	= "midi";
	fType2Name[k_missing_glyph] 	= "missing-glyph";
	fType2Name[k_monogr] 	= "monogr";
	fType2Name[k_mordent] 	= "mordent";
	fType2Name[k_mpath] 	= "mpath";
	fType2Name[k_multiRest] 	= "multiRest";
	fType2Name[k_multiRpt] 	= "multiRpt";
	fType2Name[k_music] 	= "music";
	fType2Name[k_name] 	= "name";
	fType2Name[k_nameLink] 	= "nameLink";
	fType2Name[k_namespace] 	= "namespace";
	fType2Name[k_normalization] 	= "normalization";
	fType2Name[k_note] 	= "note";
	fType2Name[k_noteOff] 	= "noteOff";
	fType2Name[k_noteOn] 	= "noteOn";
	fType2Name[k_notesStmt] 	= "notesStmt";
	fType2Name[k_num] 	= "num";
	fType2Name[k_oLayer] 	= "oLayer";
	fType2Name[k_oStaff] 	= "oStaff";
	fType2Name[k_octave] 	= "octave";
	fType2Name[k_orig] 	= "orig";
	fType2Name[k_ornam] 	= "ornam";
	fType2Name[k_ossia] 	= "ossia";
	fType2Name[k_otherChar] 	= "otherChar";
	fType2Name[k_p] 	= "p";
	fType2Name[k_pad] 	= "pad";
	fType2Name[k_part] 	= "part";
	fType2Name[k_parts] 	= "parts";
	fType2Name[k_patch] 	= "patch";
	fType2Name[k_path] 	= "path";
	fType2Name[k_pattern] 	= "pattern";
	fType2Name[k_pb] 	= "pb";
	fType2Name[k_pedal] 	= "pedal";
	fType2Name[k_perfDuration] 	= "perfDuration";
	fType2Name[k_perfMedium] 	= "perfMedium";
	fType2Name[k_perfRes] 	= "perfRes";
	fType2Name[k_perfResList] 	= "perfResList";
	fType2Name[k_performance] 	= "performance";
	fType2Name[k_periodName] 	= "periodName";
	fType2Name[k_persName] 	= "persName";
	fType2Name[k_pgDesc] 	= "pgDesc";
	fType2Name[k_pgFoot] 	= "pgFoot";
	fType2Name[k_pgFoot2] 	= "pgFoot2";
	fType2Name[k_pgHead] 	= "pgHead";
	fType2Name[k_pgHead2] 	= "pgHead2";
	fType2Name[k_phrase] 	= "phrase";
	fType2Name[k_physDesc] 	= "physDesc";
	fType2Name[k_physLoc] 	= "physLoc";
	fType2Name[k_physMedium] 	= "physMedium";
	fType2Name[k_plateNum] 	= "plateNum";
	fType2Name[k_playingSpeed] 	= "playingSpeed";
	fType2Name[k_polygon] 	= "polygon";
	fType2Name[k_polyline] 	= "polyline";
	fType2Name[k_port] 	= "port";
	fType2Name[k_postBox] 	= "postBox";
	fType2Name[k_postCode] 	= "postCode";
	fType2Name[k_price] 	= "price";
	fType2Name[k_prog] 	= "prog";
	fType2Name[k_projectDesc] 	= "projectDesc";
	fType2Name[k_propName] 	= "propName";
	fType2Name[k_propValue] 	= "propValue";
	fType2Name[k_provenance] 	= "provenance";
	fType2Name[k_ptr] 	= "ptr";
	fType2Name[k_pubPlace] 	= "pubPlace";
	fType2Name[k_pubStmt] 	= "pubStmt";
	fType2Name[k_publisher] 	= "publisher";
	fType2Name[k_q] 	= "q";
	fType2Name[k_quote] 	= "quote";
	fType2Name[k_radialGradient] 	= "radialGradient";
	fType2Name[k_rdg] 	= "rdg";
	fType2Name[k_recipient] 	= "recipient";
	fType2Name[k_recording] 	= "recording";
	fType2Name[k_rect] 	= "rect";
	fType2Name[k_ref] 	= "ref";
	fType2Name[k_refrain] 	= "refrain";
	fType2Name[k_reg] 	= "reg";
	fType2Name[k_region] 	= "region";
	fType2Name[k_reh] 	= "reh";
	fType2Name[k_relatedItem] 	= "relatedItem";
	fType2Name[k_relation] 	= "relation";
	fType2Name[k_relationList] 	= "relationList";
	fType2Name[k_rend] 	= "rend";
	fType2Name[k_repository] 	= "repository";
	fType2Name[k_resp] 	= "resp";
	fType2Name[k_respStmt] 	= "respStmt";
	fType2Name[k_rest] 	= "rest";
	fType2Name[k_restore] 	= "restore";
	fType2Name[k_revisionDesc] 	= "revisionDesc";
	fType2Name[k_role] 	= "role";
	fType2Name[k_roleDesc] 	= "roleDesc";
	fType2Name[k_roleName] 	= "roleName";
	fType2Name[k_rubric] 	= "rubric";
	fType2Name[k_samplingDecl] 	= "samplingDecl";
	fType2Name[k_sb] 	= "sb";
	fType2Name[k_score] 	= "score";
	fType2Name[k_scoreDef] 	= "scoreDef";
	fType2Name[k_scoreFormat] 	= "scoreFormat";
	fType2Name[k_script] 	= "script";
	fType2Name[k_scriptDesc] 	= "scriptDesc";
	fType2Name[k_scriptNote] 	= "scriptNote";
	fType2Name[k_seal] 	= "seal";
	fType2Name[k_sealDesc] 	= "sealDesc";
	fType2Name[k_secFolio] 	= "secFolio";
	fType2Name[k_section] 	= "section";
	fType2Name[k_seg] 	= "seg";
	fType2Name[k_segmentation] 	= "segmentation";
	fType2Name[k_seqNum] 	= "seqNum";
	fType2Name[k_series] 	= "series";
	fType2Name[k_seriesStmt] 	= "seriesStmt";
	fType2Name[k_set] 	= "set";
	fType2Name[k_settlement] 	= "settlement";
	fType2Name[k_sic] 	= "sic";
	fType2Name[k_signatures] 	= "signatures";
	fType2Name[k_slur] 	= "slur";
	fType2Name[k_soundChan] 	= "soundChan";
	fType2Name[k_source] 	= "source";
	fType2Name[k_sourceDesc] 	= "sourceDesc";
	fType2Name[k_sp] 	= "sp";
	fType2Name[k_space] 	= "space";
	fType2Name[k_speaker] 	= "speaker";
	fType2Name[k_specRepro] 	= "specRepro";
	fType2Name[k_sponsor] 	= "sponsor";
	fType2Name[k_stack] 	= "stack";
	fType2Name[k_staff] 	= "staff";
	fType2Name[k_staffDef] 	= "staffDef";
	fType2Name[k_staffGrp] 	= "staffGrp";
	fType2Name[k_stageDir] 	= "stageDir";
	fType2Name[k_stamp] 	= "stamp";
	fType2Name[k_stdVals] 	= "stdVals";
	fType2Name[k_stop] 	= "stop";
	fType2Name[k_street] 	= "street";
	fType2Name[k_style] 	= "style";
	fType2Name[k_styleName] 	= "styleName";
	fType2Name[k_subst] 	= "subst";
	fType2Name[k_supplied] 	= "supplied";
	fType2Name[k_support] 	= "support";
	fType2Name[k_supportDesc] 	= "supportDesc";
	fType2Name[k_surface] 	= "surface";
	fType2Name[k_svg] 	= "svg";
	fType2Name[k_switch] 	= "switch";
	fType2Name[k_syl] 	= "syl";
	fType2Name[k_symName] 	= "symName";
	fType2Name[k_symProp] 	= "symProp";
	fType2Name[k_symbol] 	= "symbol";
	fType2Name[k_symbolDef] 	= "symbolDef";
	fType2Name[k_symbolTable] 	= "symbolTable";
	fType2Name[k_sysReq] 	= "sysReq";
	fType2Name[k_table] 	= "table";
	fType2Name[k_tagUsage] 	= "tagUsage";
	fType2Name[k_tagsDecl] 	= "tagsDecl";
	fType2Name[k_taxonomy] 	= "taxonomy";
	fType2Name[k_td] 	= "td";
	fType2Name[k_tempo] 	= "tempo";
	fType2Name[k_term] 	= "term";
	fType2Name[k_termList] 	= "termList";
	fType2Name[k_text] 	= "text";
	fType2Name[k_textLang] 	= "textLang";
	fType2Name[k_textPath] 	= "textPath";
	fType2Name[k_th] 	= "th";
	fType2Name[k_tie] 	= "tie";
	fType2Name[k_title] 	= "title";
	fType2Name[k_titlePage] 	= "titlePage";
	fType2Name[k_titlePart] 	= "titlePart";
	fType2Name[k_titleStmt] 	= "titleStmt";
	fType2Name[k_tr] 	= "tr";
	fType2Name[k_trackConfig] 	= "trackConfig";
	fType2Name[k_treatHist] 	= "treatHist";
	fType2Name[k_treatSched] 	= "treatSched";
	fType2Name[k_tref] 	= "tref";
	fType2Name[k_trill] 	= "trill";
	fType2Name[k_trkName] 	= "trkName";
	fType2Name[k_tspan] 	= "tspan";
	fType2Name[k_tuplet] 	= "tuplet";
	fType2Name[k_tupletSpan] 	= "tupletSpan";
	fType2Name[k_turn] 	= "turn";
	fType2Name[k_typeDesc] 	= "typeDesc";
	fType2Name[k_typeNote] 	= "typeNote";
	fType2Name[k_unclear] 	= "unclear";
	fType2Name[k_unpub] 	= "unpub";
	fType2Name[k_use] 	= "use";
	fType2Name[k_useRestrict] 	= "useRestrict";
	fType2Name[k_vel] 	= "vel";
	fType2Name[k_verse] 	= "verse";
	fType2Name[k_view] 	= "view";
	fType2Name[k_vkern] 	= "vkern";
	fType2Name[k_volta] 	= "volta";
	fType2Name[k_watermark] 	= "watermark";
	fType2Name[k_when] 	= "when";
	fType2Name[k_width] 	= "width";
	fType2Name[k_work] 	= "work";
	fType2Name[k_workList] 	= "workList";
	fType2Name[k_zone] 	= "zone";
}
}
