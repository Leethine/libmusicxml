/*
  MusicXML Library
  Copyright (C) Grame 2006-2020

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.

  Grame Research Laboratory, 11, cours de Verdun Gensoul 69002 Lyon - France
  research@grame.fr
*/

//======================================================================
// DON'T MODIFY THIS FILE!
// It is automatically generated from the MEI schema.
// (see the schema folder) 
//======================================================================

#ifndef __typedefs__
#define __typedefs__

#include "elements.h"
#include "types.h"

namespace MusicXML2 
{

typedef SMARTP<musicxml<kComment> >					S_comment;
typedef SMARTP<musicxml<kProcessingInstruction> >	S_processing_instruction;

typedef SMARTP<musicxml<k_a> >		S_a;
typedef SMARTP<musicxml<k_abbr> >		S_abbr;
typedef SMARTP<musicxml<k_accMat> >		S_accMat;
typedef SMARTP<musicxml<k_accessRestrict> >		S_accessRestrict;
typedef SMARTP<musicxml<k_accid> >		S_accid;
typedef SMARTP<musicxml<k_acquisition> >		S_acquisition;
typedef SMARTP<musicxml<k_actor> >		S_actor;
typedef SMARTP<musicxml<k_add> >		S_add;
typedef SMARTP<musicxml<k_addDesc> >		S_addDesc;
typedef SMARTP<musicxml<k_addName> >		S_addName;
typedef SMARTP<musicxml<k_addrLine> >		S_addrLine;
typedef SMARTP<musicxml<k_address> >		S_address;
typedef SMARTP<musicxml<k_altGlyph> >		S_altGlyph;
typedef SMARTP<musicxml<k_altGlyphDef> >		S_altGlyphDef;
typedef SMARTP<musicxml<k_altGlyphItem> >		S_altGlyphItem;
typedef SMARTP<musicxml<k_altId> >		S_altId;
typedef SMARTP<musicxml<k_ambNote> >		S_ambNote;
typedef SMARTP<musicxml<k_ambitus> >		S_ambitus;
typedef SMARTP<musicxml<k_analytic> >		S_analytic;
typedef SMARTP<musicxml<k_anchoredText> >		S_anchoredText;
typedef SMARTP<musicxml<k_animate> >		S_animate;
typedef SMARTP<musicxml<k_animateColor> >		S_animateColor;
typedef SMARTP<musicxml<k_animateMotion> >		S_animateMotion;
typedef SMARTP<musicxml<k_animateTransform> >		S_animateTransform;
typedef SMARTP<musicxml<k_annot> >		S_annot;
typedef SMARTP<musicxml<k_app> >		S_app;
typedef SMARTP<musicxml<k_appInfo> >		S_appInfo;
typedef SMARTP<musicxml<k_application> >		S_application;
typedef SMARTP<musicxml<k_argument> >		S_argument;
typedef SMARTP<musicxml<k_arpeg> >		S_arpeg;
typedef SMARTP<musicxml<k_arranger> >		S_arranger;
typedef SMARTP<musicxml<k_artic> >		S_artic;
typedef SMARTP<musicxml<k_attUsage> >		S_attUsage;
typedef SMARTP<musicxml<k_attacca> >		S_attacca;
typedef SMARTP<musicxml<k_audience> >		S_audience;
typedef SMARTP<musicxml<k_author> >		S_author;
typedef SMARTP<musicxml<k_avFile> >		S_avFile;
typedef SMARTP<musicxml<k_availability> >		S_availability;
typedef SMARTP<musicxml<k_bTrem> >		S_bTrem;
typedef SMARTP<musicxml<k_back> >		S_back;
typedef SMARTP<musicxml<k_barLine> >		S_barLine;
typedef SMARTP<musicxml<k_barre> >		S_barre;
typedef SMARTP<musicxml<k_beam> >		S_beam;
typedef SMARTP<musicxml<k_beamSpan> >		S_beamSpan;
typedef SMARTP<musicxml<k_beatRpt> >		S_beatRpt;
typedef SMARTP<musicxml<k_bend> >		S_bend;
typedef SMARTP<musicxml<k_bibl> >		S_bibl;
typedef SMARTP<musicxml<k_biblList> >		S_biblList;
typedef SMARTP<musicxml<k_biblScope> >		S_biblScope;
typedef SMARTP<musicxml<k_biblStruct> >		S_biblStruct;
typedef SMARTP<musicxml<k_bifolium> >		S_bifolium;
typedef SMARTP<musicxml<k_binding> >		S_binding;
typedef SMARTP<musicxml<k_bindingDesc> >		S_bindingDesc;
typedef SMARTP<musicxml<k_bloc> >		S_bloc;
typedef SMARTP<musicxml<k_body> >		S_body;
typedef SMARTP<musicxml<k_bracketSpan> >		S_bracketSpan;
typedef SMARTP<musicxml<k_breath> >		S_breath;
typedef SMARTP<musicxml<k_byline> >		S_byline;
typedef SMARTP<musicxml<k_caesura> >		S_caesura;
typedef SMARTP<musicxml<k_caption> >		S_caption;
typedef SMARTP<musicxml<k_captureMode> >		S_captureMode;
typedef SMARTP<musicxml<k_carrierForm> >		S_carrierForm;
typedef SMARTP<musicxml<k_castGrp> >		S_castGrp;
typedef SMARTP<musicxml<k_castItem> >		S_castItem;
typedef SMARTP<musicxml<k_castList> >		S_castList;
typedef SMARTP<musicxml<k_catRel> >		S_catRel;
typedef SMARTP<musicxml<k_catchwords> >		S_catchwords;
typedef SMARTP<musicxml<k_category> >		S_category;
typedef SMARTP<musicxml<k_cb> >		S_cb;
typedef SMARTP<musicxml<k_cc> >		S_cc;
typedef SMARTP<musicxml<k_chan> >		S_chan;
typedef SMARTP<musicxml<k_chanPr> >		S_chanPr;
typedef SMARTP<musicxml<k_change> >		S_change;
typedef SMARTP<musicxml<k_changeDesc> >		S_changeDesc;
typedef SMARTP<musicxml<k_choice> >		S_choice;
typedef SMARTP<musicxml<k_chord> >		S_chord;
typedef SMARTP<musicxml<k_chordDef> >		S_chordDef;
typedef SMARTP<musicxml<k_chordMember> >		S_chordMember;
typedef SMARTP<musicxml<k_chordTable> >		S_chordTable;
typedef SMARTP<musicxml<k_circle> >		S_circle;
typedef SMARTP<musicxml<k_classDecls> >		S_classDecls;
typedef SMARTP<musicxml<k_classification> >		S_classification;
typedef SMARTP<musicxml<k_clef> >		S_clef;
typedef SMARTP<musicxml<k_clefGrp> >		S_clefGrp;
typedef SMARTP<musicxml<k_clip> >		S_clip;
typedef SMARTP<musicxml<k_clipPath> >		S_clipPath;
typedef SMARTP<musicxml<k_colLayout> >		S_colLayout;
typedef SMARTP<musicxml<k_collation> >		S_collation;
typedef SMARTP<musicxml<k_colophon> >		S_colophon;
typedef SMARTP<musicxml<k_color_profile> >		S_color_profile;
typedef SMARTP<musicxml<k_componentList> >		S_componentList;
typedef SMARTP<musicxml<k_composer> >		S_composer;
typedef SMARTP<musicxml<k_condition> >		S_condition;
typedef SMARTP<musicxml<k_contentItem> >		S_contentItem;
typedef SMARTP<musicxml<k_contents> >		S_contents;
typedef SMARTP<musicxml<k_context> >		S_context;
typedef SMARTP<musicxml<k_contributor> >		S_contributor;
typedef SMARTP<musicxml<k_corpName> >		S_corpName;
typedef SMARTP<musicxml<k_corr> >		S_corr;
typedef SMARTP<musicxml<k_correction> >		S_correction;
typedef SMARTP<musicxml<k_country> >		S_country;
typedef SMARTP<musicxml<k_cpMark> >		S_cpMark;
typedef SMARTP<musicxml<k_creation> >		S_creation;
typedef SMARTP<musicxml<k_cue> >		S_cue;
typedef SMARTP<musicxml<k_cursor> >		S_cursor;
typedef SMARTP<musicxml<k_curve> >		S_curve;
typedef SMARTP<musicxml<k_custos> >		S_custos;
typedef SMARTP<musicxml<k_cutout> >		S_cutout;
typedef SMARTP<musicxml<k_damage> >		S_damage;
typedef SMARTP<musicxml<k_date> >		S_date;
typedef SMARTP<musicxml<k_decoDesc> >		S_decoDesc;
typedef SMARTP<musicxml<k_decoNote> >		S_decoNote;
typedef SMARTP<musicxml<k_dedicatee> >		S_dedicatee;
typedef SMARTP<musicxml<k_dedication> >		S_dedication;
typedef SMARTP<musicxml<k_definition_src> >		S_definition_src;
typedef SMARTP<musicxml<k_defs> >		S_defs;
typedef SMARTP<musicxml<k_del> >		S_del;
typedef SMARTP<musicxml<k_depth> >		S_depth;
typedef SMARTP<musicxml<k_desc> >		S_desc;
typedef SMARTP<musicxml<k_dim> >		S_dim;
typedef SMARTP<musicxml<k_dimensions> >		S_dimensions;
typedef SMARTP<musicxml<k_dir> >		S_dir;
typedef SMARTP<musicxml<k_distributor> >		S_distributor;
typedef SMARTP<musicxml<k_district> >		S_district;
typedef SMARTP<musicxml<k_div> >		S_div;
typedef SMARTP<musicxml<k_domainsDecl> >		S_domainsDecl;
typedef SMARTP<musicxml<k_dot> >		S_dot;
typedef SMARTP<musicxml<k_dynam> >		S_dynam;
typedef SMARTP<musicxml<k_edition> >		S_edition;
typedef SMARTP<musicxml<k_editionStmt> >		S_editionStmt;
typedef SMARTP<musicxml<k_editor> >		S_editor;
typedef SMARTP<musicxml<k_editorialDecl> >		S_editorialDecl;
typedef SMARTP<musicxml<k_ellipse> >		S_ellipse;
typedef SMARTP<musicxml<k_encodingDesc> >		S_encodingDesc;
typedef SMARTP<musicxml<k_ending> >		S_ending;
typedef SMARTP<musicxml<k_epigraph> >		S_epigraph;
typedef SMARTP<musicxml<k_event> >		S_event;
typedef SMARTP<musicxml<k_eventList> >		S_eventList;
typedef SMARTP<musicxml<k_exhibHist> >		S_exhibHist;
typedef SMARTP<musicxml<k_expan> >		S_expan;
typedef SMARTP<musicxml<k_expansion> >		S_expansion;
typedef SMARTP<musicxml<k_explicit> >		S_explicit;
typedef SMARTP<musicxml<k_expression> >		S_expression;
typedef SMARTP<musicxml<k_expressionList> >		S_expressionList;
typedef SMARTP<musicxml<k_extMeta> >		S_extMeta;
typedef SMARTP<musicxml<k_extent> >		S_extent;
typedef SMARTP<musicxml<k_f> >		S_f;
typedef SMARTP<musicxml<k_fTrem> >		S_fTrem;
typedef SMARTP<musicxml<k_facsimile> >		S_facsimile;
typedef SMARTP<musicxml<k_famName> >		S_famName;
typedef SMARTP<musicxml<k_fb> >		S_fb;
typedef SMARTP<musicxml<k_feBlend> >		S_feBlend;
typedef SMARTP<musicxml<k_feColorMatrix> >		S_feColorMatrix;
typedef SMARTP<musicxml<k_feComponentTransfer> >		S_feComponentTransfer;
typedef SMARTP<musicxml<k_feComposite> >		S_feComposite;
typedef SMARTP<musicxml<k_feConvolveMatrix> >		S_feConvolveMatrix;
typedef SMARTP<musicxml<k_feDiffuseLighting> >		S_feDiffuseLighting;
typedef SMARTP<musicxml<k_feDisplacementMap> >		S_feDisplacementMap;
typedef SMARTP<musicxml<k_feDistantLight> >		S_feDistantLight;
typedef SMARTP<musicxml<k_feFlood> >		S_feFlood;
typedef SMARTP<musicxml<k_feFuncA> >		S_feFuncA;
typedef SMARTP<musicxml<k_feFuncB> >		S_feFuncB;
typedef SMARTP<musicxml<k_feFuncG> >		S_feFuncG;
typedef SMARTP<musicxml<k_feFuncR> >		S_feFuncR;
typedef SMARTP<musicxml<k_feGaussianBlur> >		S_feGaussianBlur;
typedef SMARTP<musicxml<k_feImage> >		S_feImage;
typedef SMARTP<musicxml<k_feMerge> >		S_feMerge;
typedef SMARTP<musicxml<k_feMergeNode> >		S_feMergeNode;
typedef SMARTP<musicxml<k_feMorphology> >		S_feMorphology;
typedef SMARTP<musicxml<k_feOffset> >		S_feOffset;
typedef SMARTP<musicxml<k_fePointLight> >		S_fePointLight;
typedef SMARTP<musicxml<k_feSpecularLighting> >		S_feSpecularLighting;
typedef SMARTP<musicxml<k_feSpotLight> >		S_feSpotLight;
typedef SMARTP<musicxml<k_feTile> >		S_feTile;
typedef SMARTP<musicxml<k_feTurbulence> >		S_feTurbulence;
typedef SMARTP<musicxml<k_fermata> >		S_fermata;
typedef SMARTP<musicxml<k_fig> >		S_fig;
typedef SMARTP<musicxml<k_figDesc> >		S_figDesc;
typedef SMARTP<musicxml<k_fileChar> >		S_fileChar;
typedef SMARTP<musicxml<k_fileDesc> >		S_fileDesc;
typedef SMARTP<musicxml<k_filter> >		S_filter;
typedef SMARTP<musicxml<k_fing> >		S_fing;
typedef SMARTP<musicxml<k_fingGrp> >		S_fingGrp;
typedef SMARTP<musicxml<k_fingerprint> >		S_fingerprint;
typedef SMARTP<musicxml<k_foliaDesc> >		S_foliaDesc;
typedef SMARTP<musicxml<k_foliation> >		S_foliation;
typedef SMARTP<musicxml<k_folium> >		S_folium;
typedef SMARTP<musicxml<k_font> >		S_font;
typedef SMARTP<musicxml<k_font_face> >		S_font_face;
typedef SMARTP<musicxml<k_font_face_format> >		S_font_face_format;
typedef SMARTP<musicxml<k_font_face_name> >		S_font_face_name;
typedef SMARTP<musicxml<k_font_face_src> >		S_font_face_src;
typedef SMARTP<musicxml<k_font_face_uri> >		S_font_face_uri;
typedef SMARTP<musicxml<k_foreName> >		S_foreName;
typedef SMARTP<musicxml<k_foreignObject> >		S_foreignObject;
typedef SMARTP<musicxml<k_front> >		S_front;
typedef SMARTP<musicxml<k_funder> >		S_funder;
typedef SMARTP<musicxml<k_g> >		S_g;
typedef SMARTP<musicxml<k_gap> >		S_gap;
typedef SMARTP<musicxml<k_genDesc> >		S_genDesc;
typedef SMARTP<musicxml<k_genName> >		S_genName;
typedef SMARTP<musicxml<k_genState> >		S_genState;
typedef SMARTP<musicxml<k_genre> >		S_genre;
typedef SMARTP<musicxml<k_geogFeat> >		S_geogFeat;
typedef SMARTP<musicxml<k_geogName> >		S_geogName;
typedef SMARTP<musicxml<k_gliss> >		S_gliss;
typedef SMARTP<musicxml<k_glyph> >		S_glyph;
typedef SMARTP<musicxml<k_glyphRef> >		S_glyphRef;
typedef SMARTP<musicxml<k_graceGrp> >		S_graceGrp;
typedef SMARTP<musicxml<k_graphic> >		S_graphic;
typedef SMARTP<musicxml<k_group> >		S_group;
typedef SMARTP<musicxml<k_grpSym> >		S_grpSym;
typedef SMARTP<musicxml<k_hairpin> >		S_hairpin;
typedef SMARTP<musicxml<k_halfmRpt> >		S_halfmRpt;
typedef SMARTP<musicxml<k_hand> >		S_hand;
typedef SMARTP<musicxml<k_handList> >		S_handList;
typedef SMARTP<musicxml<k_handShift> >		S_handShift;
typedef SMARTP<musicxml<k_harm> >		S_harm;
typedef SMARTP<musicxml<k_harpPedal> >		S_harpPedal;
typedef SMARTP<musicxml<k_head> >		S_head;
typedef SMARTP<musicxml<k_height> >		S_height;
typedef SMARTP<musicxml<k_heraldry> >		S_heraldry;
typedef SMARTP<musicxml<k_hex> >		S_hex;
typedef SMARTP<musicxml<k_history> >		S_history;
typedef SMARTP<musicxml<k_hkern> >		S_hkern;
typedef SMARTP<musicxml<k_identifier> >		S_identifier;
typedef SMARTP<musicxml<k_image> >		S_image;
typedef SMARTP<musicxml<k_imprimatur> >		S_imprimatur;
typedef SMARTP<musicxml<k_imprint> >		S_imprint;
typedef SMARTP<musicxml<k_incip> >		S_incip;
typedef SMARTP<musicxml<k_incipCode> >		S_incipCode;
typedef SMARTP<musicxml<k_incipText> >		S_incipText;
typedef SMARTP<musicxml<k_inscription> >		S_inscription;
typedef SMARTP<musicxml<k_instrDef> >		S_instrDef;
typedef SMARTP<musicxml<k_instrGrp> >		S_instrGrp;
typedef SMARTP<musicxml<k_interpretation> >		S_interpretation;
typedef SMARTP<musicxml<k_item> >		S_item;
typedef SMARTP<musicxml<k_itemList> >		S_itemList;
typedef SMARTP<musicxml<k_key> >		S_key;
typedef SMARTP<musicxml<k_keyAccid> >		S_keyAccid;
typedef SMARTP<musicxml<k_keySig> >		S_keySig;
typedef SMARTP<musicxml<k_l> >		S_l;
typedef SMARTP<musicxml<k_label> >		S_label;
typedef SMARTP<musicxml<k_labelAbbr> >		S_labelAbbr;
typedef SMARTP<musicxml<k_langUsage> >		S_langUsage;
typedef SMARTP<musicxml<k_language> >		S_language;
typedef SMARTP<musicxml<k_layer> >		S_layer;
typedef SMARTP<musicxml<k_layerDef> >		S_layerDef;
typedef SMARTP<musicxml<k_layout> >		S_layout;
typedef SMARTP<musicxml<k_layoutDesc> >		S_layoutDesc;
typedef SMARTP<musicxml<k_lb> >		S_lb;
typedef SMARTP<musicxml<k_lem> >		S_lem;
typedef SMARTP<musicxml<k_lg> >		S_lg;
typedef SMARTP<musicxml<k_li> >		S_li;
typedef SMARTP<musicxml<k_librettist> >		S_librettist;
typedef SMARTP<musicxml<k_line> >		S_line;
typedef SMARTP<musicxml<k_linearGradient> >		S_linearGradient;
typedef SMARTP<musicxml<k_list> >		S_list;
typedef SMARTP<musicxml<k_locus> >		S_locus;
typedef SMARTP<musicxml<k_locusGrp> >		S_locusGrp;
typedef SMARTP<musicxml<k_lv> >		S_lv;
typedef SMARTP<musicxml<k_lyricist> >		S_lyricist;
typedef SMARTP<musicxml<k_mNum> >		S_mNum;
typedef SMARTP<musicxml<k_mRest> >		S_mRest;
typedef SMARTP<musicxml<k_mRpt> >		S_mRpt;
typedef SMARTP<musicxml<k_mRpt2> >		S_mRpt2;
typedef SMARTP<musicxml<k_mSpace> >		S_mSpace;
typedef SMARTP<musicxml<k_manifestation> >		S_manifestation;
typedef SMARTP<musicxml<k_manifestationList> >		S_manifestationList;
typedef SMARTP<musicxml<k_mapping> >		S_mapping;
typedef SMARTP<musicxml<k_marker> >		S_marker;
typedef SMARTP<musicxml<k_mask> >		S_mask;
typedef SMARTP<musicxml<k_mdiv> >		S_mdiv;
typedef SMARTP<musicxml<k_measure> >		S_measure;
typedef SMARTP<musicxml<k_mei> >		S_mei;
typedef SMARTP<musicxml<k_meiCorpus> >		S_meiCorpus;
typedef SMARTP<musicxml<k_meiHead> >		S_meiHead;
typedef SMARTP<musicxml<k_mensuration> >		S_mensuration;
typedef SMARTP<musicxml<k_metaMark> >		S_metaMark;
typedef SMARTP<musicxml<k_metaText> >		S_metaText;
typedef SMARTP<musicxml<k_metadata> >		S_metadata;
typedef SMARTP<musicxml<k_meter> >		S_meter;
typedef SMARTP<musicxml<k_meterSig> >		S_meterSig;
typedef SMARTP<musicxml<k_meterSigGrp> >		S_meterSigGrp;
typedef SMARTP<musicxml<k_midi> >		S_midi;
typedef SMARTP<musicxml<k_missing_glyph> >		S_missing_glyph;
typedef SMARTP<musicxml<k_monogr> >		S_monogr;
typedef SMARTP<musicxml<k_mordent> >		S_mordent;
typedef SMARTP<musicxml<k_mpath> >		S_mpath;
typedef SMARTP<musicxml<k_multiRest> >		S_multiRest;
typedef SMARTP<musicxml<k_multiRpt> >		S_multiRpt;
typedef SMARTP<musicxml<k_music> >		S_music;
typedef SMARTP<musicxml<k_name> >		S_name;
typedef SMARTP<musicxml<k_nameLink> >		S_nameLink;
typedef SMARTP<musicxml<k_namespace> >		S_namespace;
typedef SMARTP<musicxml<k_normalization> >		S_normalization;
typedef SMARTP<musicxml<k_note> >		S_note;
typedef SMARTP<musicxml<k_noteOff> >		S_noteOff;
typedef SMARTP<musicxml<k_noteOn> >		S_noteOn;
typedef SMARTP<musicxml<k_notesStmt> >		S_notesStmt;
typedef SMARTP<musicxml<k_num> >		S_num;
typedef SMARTP<musicxml<k_oLayer> >		S_oLayer;
typedef SMARTP<musicxml<k_oStaff> >		S_oStaff;
typedef SMARTP<musicxml<k_octave> >		S_octave;
typedef SMARTP<musicxml<k_orig> >		S_orig;
typedef SMARTP<musicxml<k_ornam> >		S_ornam;
typedef SMARTP<musicxml<k_ossia> >		S_ossia;
typedef SMARTP<musicxml<k_otherChar> >		S_otherChar;
typedef SMARTP<musicxml<k_p> >		S_p;
typedef SMARTP<musicxml<k_pad> >		S_pad;
typedef SMARTP<musicxml<k_part> >		S_part;
typedef SMARTP<musicxml<k_parts> >		S_parts;
typedef SMARTP<musicxml<k_patch> >		S_patch;
typedef SMARTP<musicxml<k_path> >		S_path;
typedef SMARTP<musicxml<k_pattern> >		S_pattern;
typedef SMARTP<musicxml<k_pb> >		S_pb;
typedef SMARTP<musicxml<k_pedal> >		S_pedal;
typedef SMARTP<musicxml<k_perfDuration> >		S_perfDuration;
typedef SMARTP<musicxml<k_perfMedium> >		S_perfMedium;
typedef SMARTP<musicxml<k_perfRes> >		S_perfRes;
typedef SMARTP<musicxml<k_perfResList> >		S_perfResList;
typedef SMARTP<musicxml<k_performance> >		S_performance;
typedef SMARTP<musicxml<k_periodName> >		S_periodName;
typedef SMARTP<musicxml<k_persName> >		S_persName;
typedef SMARTP<musicxml<k_pgDesc> >		S_pgDesc;
typedef SMARTP<musicxml<k_pgFoot> >		S_pgFoot;
typedef SMARTP<musicxml<k_pgFoot2> >		S_pgFoot2;
typedef SMARTP<musicxml<k_pgHead> >		S_pgHead;
typedef SMARTP<musicxml<k_pgHead2> >		S_pgHead2;
typedef SMARTP<musicxml<k_phrase> >		S_phrase;
typedef SMARTP<musicxml<k_physDesc> >		S_physDesc;
typedef SMARTP<musicxml<k_physLoc> >		S_physLoc;
typedef SMARTP<musicxml<k_physMedium> >		S_physMedium;
typedef SMARTP<musicxml<k_plateNum> >		S_plateNum;
typedef SMARTP<musicxml<k_playingSpeed> >		S_playingSpeed;
typedef SMARTP<musicxml<k_polygon> >		S_polygon;
typedef SMARTP<musicxml<k_polyline> >		S_polyline;
typedef SMARTP<musicxml<k_port> >		S_port;
typedef SMARTP<musicxml<k_postBox> >		S_postBox;
typedef SMARTP<musicxml<k_postCode> >		S_postCode;
typedef SMARTP<musicxml<k_price> >		S_price;
typedef SMARTP<musicxml<k_prog> >		S_prog;
typedef SMARTP<musicxml<k_projectDesc> >		S_projectDesc;
typedef SMARTP<musicxml<k_propName> >		S_propName;
typedef SMARTP<musicxml<k_propValue> >		S_propValue;
typedef SMARTP<musicxml<k_provenance> >		S_provenance;
typedef SMARTP<musicxml<k_ptr> >		S_ptr;
typedef SMARTP<musicxml<k_pubPlace> >		S_pubPlace;
typedef SMARTP<musicxml<k_pubStmt> >		S_pubStmt;
typedef SMARTP<musicxml<k_publisher> >		S_publisher;
typedef SMARTP<musicxml<k_q> >		S_q;
typedef SMARTP<musicxml<k_quote> >		S_quote;
typedef SMARTP<musicxml<k_radialGradient> >		S_radialGradient;
typedef SMARTP<musicxml<k_rdg> >		S_rdg;
typedef SMARTP<musicxml<k_recipient> >		S_recipient;
typedef SMARTP<musicxml<k_recording> >		S_recording;
typedef SMARTP<musicxml<k_rect> >		S_rect;
typedef SMARTP<musicxml<k_ref> >		S_ref;
typedef SMARTP<musicxml<k_refrain> >		S_refrain;
typedef SMARTP<musicxml<k_reg> >		S_reg;
typedef SMARTP<musicxml<k_region> >		S_region;
typedef SMARTP<musicxml<k_reh> >		S_reh;
typedef SMARTP<musicxml<k_relatedItem> >		S_relatedItem;
typedef SMARTP<musicxml<k_relation> >		S_relation;
typedef SMARTP<musicxml<k_relationList> >		S_relationList;
typedef SMARTP<musicxml<k_rend> >		S_rend;
typedef SMARTP<musicxml<k_repository> >		S_repository;
typedef SMARTP<musicxml<k_resp> >		S_resp;
typedef SMARTP<musicxml<k_respStmt> >		S_respStmt;
typedef SMARTP<musicxml<k_rest> >		S_rest;
typedef SMARTP<musicxml<k_restore> >		S_restore;
typedef SMARTP<musicxml<k_revisionDesc> >		S_revisionDesc;
typedef SMARTP<musicxml<k_role> >		S_role;
typedef SMARTP<musicxml<k_roleDesc> >		S_roleDesc;
typedef SMARTP<musicxml<k_roleName> >		S_roleName;
typedef SMARTP<musicxml<k_rubric> >		S_rubric;
typedef SMARTP<musicxml<k_samplingDecl> >		S_samplingDecl;
typedef SMARTP<musicxml<k_sb> >		S_sb;
typedef SMARTP<musicxml<k_score> >		S_score;
typedef SMARTP<musicxml<k_scoreDef> >		S_scoreDef;
typedef SMARTP<musicxml<k_scoreFormat> >		S_scoreFormat;
typedef SMARTP<musicxml<k_script> >		S_script;
typedef SMARTP<musicxml<k_scriptDesc> >		S_scriptDesc;
typedef SMARTP<musicxml<k_scriptNote> >		S_scriptNote;
typedef SMARTP<musicxml<k_seal> >		S_seal;
typedef SMARTP<musicxml<k_sealDesc> >		S_sealDesc;
typedef SMARTP<musicxml<k_secFolio> >		S_secFolio;
typedef SMARTP<musicxml<k_section> >		S_section;
typedef SMARTP<musicxml<k_seg> >		S_seg;
typedef SMARTP<musicxml<k_segmentation> >		S_segmentation;
typedef SMARTP<musicxml<k_seqNum> >		S_seqNum;
typedef SMARTP<musicxml<k_series> >		S_series;
typedef SMARTP<musicxml<k_seriesStmt> >		S_seriesStmt;
typedef SMARTP<musicxml<k_set> >		S_set;
typedef SMARTP<musicxml<k_settlement> >		S_settlement;
typedef SMARTP<musicxml<k_sic> >		S_sic;
typedef SMARTP<musicxml<k_signatures> >		S_signatures;
typedef SMARTP<musicxml<k_slur> >		S_slur;
typedef SMARTP<musicxml<k_soundChan> >		S_soundChan;
typedef SMARTP<musicxml<k_source> >		S_source;
typedef SMARTP<musicxml<k_sourceDesc> >		S_sourceDesc;
typedef SMARTP<musicxml<k_sp> >		S_sp;
typedef SMARTP<musicxml<k_space> >		S_space;
typedef SMARTP<musicxml<k_speaker> >		S_speaker;
typedef SMARTP<musicxml<k_specRepro> >		S_specRepro;
typedef SMARTP<musicxml<k_sponsor> >		S_sponsor;
typedef SMARTP<musicxml<k_stack> >		S_stack;
typedef SMARTP<musicxml<k_staff> >		S_staff;
typedef SMARTP<musicxml<k_staffDef> >		S_staffDef;
typedef SMARTP<musicxml<k_staffGrp> >		S_staffGrp;
typedef SMARTP<musicxml<k_stageDir> >		S_stageDir;
typedef SMARTP<musicxml<k_stamp> >		S_stamp;
typedef SMARTP<musicxml<k_stdVals> >		S_stdVals;
typedef SMARTP<musicxml<k_stop> >		S_stop;
typedef SMARTP<musicxml<k_street> >		S_street;
typedef SMARTP<musicxml<k_style> >		S_style;
typedef SMARTP<musicxml<k_styleName> >		S_styleName;
typedef SMARTP<musicxml<k_subst> >		S_subst;
typedef SMARTP<musicxml<k_supplied> >		S_supplied;
typedef SMARTP<musicxml<k_support> >		S_support;
typedef SMARTP<musicxml<k_supportDesc> >		S_supportDesc;
typedef SMARTP<musicxml<k_surface> >		S_surface;
typedef SMARTP<musicxml<k_svg> >		S_svg;
typedef SMARTP<musicxml<k_switch> >		S_switch;
typedef SMARTP<musicxml<k_syl> >		S_syl;
typedef SMARTP<musicxml<k_symName> >		S_symName;
typedef SMARTP<musicxml<k_symProp> >		S_symProp;
typedef SMARTP<musicxml<k_symbol> >		S_symbol;
typedef SMARTP<musicxml<k_symbolDef> >		S_symbolDef;
typedef SMARTP<musicxml<k_symbolTable> >		S_symbolTable;
typedef SMARTP<musicxml<k_sysReq> >		S_sysReq;
typedef SMARTP<musicxml<k_table> >		S_table;
typedef SMARTP<musicxml<k_tagUsage> >		S_tagUsage;
typedef SMARTP<musicxml<k_tagsDecl> >		S_tagsDecl;
typedef SMARTP<musicxml<k_taxonomy> >		S_taxonomy;
typedef SMARTP<musicxml<k_td> >		S_td;
typedef SMARTP<musicxml<k_tempo> >		S_tempo;
typedef SMARTP<musicxml<k_term> >		S_term;
typedef SMARTP<musicxml<k_termList> >		S_termList;
typedef SMARTP<musicxml<k_text> >		S_text;
typedef SMARTP<musicxml<k_textLang> >		S_textLang;
typedef SMARTP<musicxml<k_textPath> >		S_textPath;
typedef SMARTP<musicxml<k_th> >		S_th;
typedef SMARTP<musicxml<k_tie> >		S_tie;
typedef SMARTP<musicxml<k_title> >		S_title;
typedef SMARTP<musicxml<k_titlePage> >		S_titlePage;
typedef SMARTP<musicxml<k_titlePart> >		S_titlePart;
typedef SMARTP<musicxml<k_titleStmt> >		S_titleStmt;
typedef SMARTP<musicxml<k_tr> >		S_tr;
typedef SMARTP<musicxml<k_trackConfig> >		S_trackConfig;
typedef SMARTP<musicxml<k_treatHist> >		S_treatHist;
typedef SMARTP<musicxml<k_treatSched> >		S_treatSched;
typedef SMARTP<musicxml<k_tref> >		S_tref;
typedef SMARTP<musicxml<k_trill> >		S_trill;
typedef SMARTP<musicxml<k_trkName> >		S_trkName;
typedef SMARTP<musicxml<k_tspan> >		S_tspan;
typedef SMARTP<musicxml<k_tuplet> >		S_tuplet;
typedef SMARTP<musicxml<k_tupletSpan> >		S_tupletSpan;
typedef SMARTP<musicxml<k_turn> >		S_turn;
typedef SMARTP<musicxml<k_typeDesc> >		S_typeDesc;
typedef SMARTP<musicxml<k_typeNote> >		S_typeNote;
typedef SMARTP<musicxml<k_unclear> >		S_unclear;
typedef SMARTP<musicxml<k_unpub> >		S_unpub;
typedef SMARTP<musicxml<k_use> >		S_use;
typedef SMARTP<musicxml<k_useRestrict> >		S_useRestrict;
typedef SMARTP<musicxml<k_vel> >		S_vel;
typedef SMARTP<musicxml<k_verse> >		S_verse;
typedef SMARTP<musicxml<k_view> >		S_view;
typedef SMARTP<musicxml<k_vkern> >		S_vkern;
typedef SMARTP<musicxml<k_volta> >		S_volta;
typedef SMARTP<musicxml<k_watermark> >		S_watermark;
typedef SMARTP<musicxml<k_when> >		S_when;
typedef SMARTP<musicxml<k_width> >		S_width;
typedef SMARTP<musicxml<k_work> >		S_work;
typedef SMARTP<musicxml<k_workList> >		S_workList;
typedef SMARTP<musicxml<k_zone> >		S_zone;
}
#endif
